<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HelloWorld</title>
  
  
  <link href="http://universeinheart.github.io/atom.xml" rel="self"/>
  
  <link href="http://universeinheart.github.io/"/>
  <updated>2021-04-17T10:00:42.665Z</updated>
  <id>http://universeinheart.github.io/</id>
  
  <author>
    <name>xjf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不要让“假勤奋”害了你，这才是你正确奋斗的打开方式</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/01/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/01/</id>
    <published>2021-04-17T15:26:37.000Z</published>
    <updated>2021-04-17T10:00:42.665Z</updated>
    
    <content type="html"><![CDATA[<p>你认为自己是一个勤奋的人吗？</p><p>我相信你肯定很“勤奋”，因为你每天都要努力地活着，让自己很好地生存下去。</p><p>问题是，这种“勤奋”，到底能让你产生多少实质的改变呢？</p><p>以下这些状态，你是不是都会遇到：</p><ul><li>每天重复干着不感兴趣的工作，但又不知道可以做什么；</li><li>总觉得自己缺乏自律，想做点什么提升自己都很困难；</li><li>明知道有些问题对自己造成困扰，可就是不知道怎么解决；</li><li>很多时候只能被动成长，无法自我驱动让自己主动进步；-</li></ul><p>如果你有上述这些情况，就算你每天看似活得“很努力”，你也很难获得实质的进步和改变。因为，这只是一种“<strong>虚假式的勤奋</strong>”。</p><p>虚耗时间是一件很容易的事情，但把时间投入在某些事情上，然后收获产出，就需要你对自己提出更高的要求。</p><p>而第一步，就是了解自己当前的“努力状况”。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/01/image-20210417175412078.png" class="" title="image-20210417175412078"><h3 id="你当前处于哪种劳动类别？"><a href="#你当前处于哪种劳动类别？" class="headerlink" title="你当前处于哪种劳动类别？"></a>你当前处于哪种劳动类别？</h3><p>在这个世界，我们能做的事情几乎多不胜数，而又纷繁复杂。</p><p>如果把这些我们要做的事情分门别类，大概可以分成四种特性的“劳动”：</p><ul><li>单向体力劳动，体力为主要的资源输出。如建筑工人，快递员，运动员等。</li><li>轻型体力劳动，稍微会结合脑力的一种轻度体力资源输出。如销售员，导游，出租车司机等。</li><li>复合脑力型劳动，脑力为主，体力为辅的一种资源输出。如企业策划，公司管理，教育传播等。</li><li>创造性资源劳动，脑力为主要的资源输出。如商业创业，科学发明，电影拍摄等。</li></ul><p>前两个类别，是通过“贩卖”固有的劳动资源去换取价值。这个价值，会有一个“可视化”的衡量标准，只要你肯做，肯定会获得相应的回报。</p><p>但这种劳动类别的缺点是，无论什么行业，你做的事都会有一个标准上限的“阈值”；一旦到达了这个标准上限，即便你成为行业的顶尖人物，获得的回报也就这么多。</p><p>而后两个类别，就是通过利用和整合已有的资源，让其“生出”更多的资源，从而获得高额的价值。</p><p>这些事并没有所谓的上限标准，你能产生多少价值，除了取决于你的个人能力，还要结合其他因素，才能获得“利益最大化”。</p><p>而这种劳动类别的缺点就是，有时候你做的事很讲求“时机”，如果缺乏时机，或者运气不好，就算你付出再多努力，可能也不会获得一个很好的回报。</p><p>于是这四种类型的“劳动”，就有横向和纵向之分，而由此产生两种进阶的方式：</p><ul><li>第一，从横向类别里面，挑选一个适合的工种，让自己从初级菜鸟变成顶尖高手；</li><li>第二，跳出原有劳动类别的限制，跃升到其他劳动类别，从而获得多向的发展途径；</li></ul><p>这两种前进的方式，都有一个共同点，就是无论是哪一类别的劳动，你输出的资源越是独特，越是稀缺，其产出的价值也就会越高。</p><p>在我们每个人在日常生活当中，这些劳动类别都会交错触及。只是哪一种劳动类别做主导，就决定你会产出多少价值而已。</p><p>换言之，按照接触的比例分配，我们把时间分配在哪一类事情上更多，我们由此产出的价值也就更多。</p><p>这样你就可以问自己三个问题：</p><ol><li>目前作为你主导资源输出的，是哪一种劳动类别？</li><li>这种劳动类别，做到最顶尖的程度会有什么结果？</li><li>你目前的资源，能否帮助你跃升到其他的劳动类别？</li></ol><p>好比一个水泥工，一直以来主导他资源输出的，就是单向体力劳动。这种性质的劳动，你一直做下去，只是变得更加熟手，成为这个工种的师傅而已，但本质上依然还是从事着体力劳动，这是一种限制。</p><p>如果你不喜欢这个结果，那当你做到某个程度之后，积累了好一些资源，然后自己跳出来，创业做建筑材料的老板，那这种跃升，就是对自身劳动资源的一种结构调整。</p><p>调整之后，你就脱离了水泥工这种单向体力劳动的限制，从而跳到其他的劳动类别上；输出脑力资源所占据的比例，比以前多了很多，于是个体价值的产出也因此而增加了。</p><p>当然风险也会存在，或许你的业务来源不稳定，获得的回报就没有以前从事单向体力劳动时那么固定，这也是你需要考虑的地方。</p><p>也就是说，有效的勤奋，就是结合两种类别的劳动方式，懂得如何提升自身输出资源的稀缺度，让自己在当前的劳动类别之中成为高手，或者努力跳升到更高维度的劳动类别上面，转变劳动方式，获得更好的发展。</p><p>瞄准这样一个方向去奋斗，这才是正确的做法。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/01/image-20210417175443825.png" class="" title="image-20210417175443825"><h3 id="你目前拥有的资源是什么？"><a href="#你目前拥有的资源是什么？" class="headerlink" title="你目前拥有的资源是什么？"></a>你目前拥有的资源是什么？</h3><p>奋斗的路上，需要各种资源辅助。</p><p>而在奋斗伊始，我们拥有的资源，就是自身的能力。</p><p>一个打字员和一个写作者，尽管都是“文字输入”，但其能力所创造出来的价值，却完全不一样。</p><p>前者只是“贩卖”自己轻度的脑力和体力，而后者，则是结合自己的轻度体力，通过深度的脑力创造出一篇新的文章，其难度不可同日而语了。</p><p>但正如我前面所说，一个打字员创造出来的价值是稳定的。而一个写作者，写一篇文章出来的价值，却会随着个体名气或市场需求等各种因素，而产生波动，这就是风险。</p><p>所以这就决定了，两者产生价值的不同形式。如果你能够成为一个厉害的作家，写出一篇好的文章，少则会获得几千元的收入，多则获得上万元的也有。</p><p>但一个打字员呢？</p><p>就算他再努力，打字更快，这种资源在他对应的劳动类别当中，其产出的价值也只会局限于某个范围内，很难会有更大的提升了。</p><h4 id="你拥有的资源，会决定你产生多少价值。"><a href="#你拥有的资源，会决定你产生多少价值。" class="headerlink" title="你拥有的资源，会决定你产生多少价值。"></a>你拥有的资源，会决定你产生多少价值。</h4><p>所以为什么很多运动员都愿意跨领域，去参加一些综艺节目和接拍广告之类的事情？因为他们积累下来的资源，可以帮助他们跃升到其他类别的劳动当中，从而获得利益最大化，而不是单纯地输出体力。</p><p>毕竟运动这种事，你再怎么努力，当你拿到第一名时，已经就是尽头了，奖金也有限，尽管这也是非常了不起。但参加综艺节目或者拍摄广告，很难有一个明确的尽头界线。只要你能给商家创造更多的价值，你获得的收益肯定就会更多。</p><p>这种根据自身情况而做出的资源结构调整，是我们每个人都应该掌握的本领。</p><p>既然如此，根据你所处的“劳动类别”，然后给自己分析一下，你当前的努力，可以在你的劳动类别当中深挖下去，成为个中高手吗？抑或你是想跃升到其他的劳动类别，转变你的劳动方式呢？</p><p>如果你想要让自己获得改变，你就需要问一问自己，目前你所拥有的劳动资源，可以给你带来多少价值？</p><p>不管你想成为当前劳动类别的高手，还是想跃升到不同的劳动类别，获得更好的发展，缺少相关的劳动资源，那一切免谈。</p><h2 id="积累资源的方式"><a href="#积累资源的方式" class="headerlink" title="积累资源的方式"></a>积累资源的方式</h2><p>很多人都会有这种问题，就是工作了很多年，发现自己的经验居然“不值钱”。</p><p>一旦想到转换工作，整个人都会傻了眼，好像什么都要重头再来学一遍似的。这种看似勤奋，却无法让自己获得实质进步的行为，就被称为“虚假式勤奋”了。</p><p>无论你从事任何行业，有些基本甚至重要的能力都是通用的，而这些技能就被称为“可迁移能力”。</p><p>掌握这些“可迁移能力”，即便以后你转换工作，你过往的“经验”，也能够帮助你快速上手，而不是要重头再学。</p><p>根据youcore王世民老师提出的概念，我们每个人都应该要有一棵“能力树”，把自己需要积累的能力，清晰地做一个规划。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/01/image-20210417175517053.png" class="" title="image-20210417175517053"><p>从这棵“能力树”中可以看得出来，决定我们是否能把自身能力转化为资源的要素，大概有四个。</p><p>我们不管从事哪一种工作，都需要以此积累相应的要素，发展自身的“能力树”。</p><p>于是有效的勤奋的步骤，就可以分为四步。</p><h3 id="第一步，设定目标搭建框架。"><a href="#第一步，设定目标搭建框架。" class="headerlink" title="第一步，设定目标搭建框架。"></a>第一步，设定目标搭建框架。</h3><p>如果你现在还在读书，你就要思考一下，将来你从事的职业，是属于哪种劳动类别的工作？</p><p>单向体力劳动的工作，你只要有充沛的体力就行，毕竟一个羸弱的身体，想去搬砖挣钱也挣不了多少。</p><p>而如果你想从事创造性资源的工作，例如想创业，你除了要积累到相关的能力，你还要找到一个可以认可你这种能力的平台。</p><p>一般而言，这个平台就是市场。</p><p>你创业出来的产品，市场的认受性高，你自然就获得丰厚的回报；反之，就是失败的可能性就会比较高。</p><p>这是这种劳动类别必须要承担的风险。</p><p>所以你要想清楚你的职业规划，你要问自己四个问题：</p><ol><li>你打算要从事哪种劳动类别的工作？</li><li>你目前的能力，是否能够从事这种劳动类别的工作？</li><li>你还缺乏哪些知识，才更好从事这种类别的工作？</li><li>你有没有准备好承担从事这种劳动类别的风险？</li></ol><p>有了这些问题的思考，你接下来才可以有目的地搭建你自身能力树的框架。</p><p>设定一个清晰而有效的目标，能够更好地帮助你积累相关的能力资源。</p><p>否则，漫无目的地上班下班，你做五年所获得的经验，也比不上别人一年所获得的经验。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/01/image-20210417175531687.png" class="" title="image-20210417175531687"><h3 id="第二步，针对性提高自身技能。"><a href="#第二步，针对性提高自身技能。" class="headerlink" title="第二步，针对性提高自身技能。"></a>第二步，针对性提高自身技能。</h3><p>如果你现在已经工作，那么你就要想一想，目前这份工作，能够给你积累的“可迁移能力”会有哪些？</p><p>好比你是一个从事流水线工作的人，每天做一些非常单调又重复的操作，看起来你好像没有什么东西可以从中积累，做多了人还容易变笨。</p><p>但其实对比一下上图的“能力树”，你就可以发现，有很多地方都能够自我提升。</p><p>例如你把手头上做得不好的工作，想办法如何做得更好，这就是思维能力和学习能力的体现，而不是用一种抗拒的心态去面对这些事情。</p><p>再如你平时只关注操作手头上的产品，有时你可以观察一下，这些产品定价背后的因素，以及供应链上下游的不同渠道，是怎么连接在一起，最后去到消费者的手上。</p><p>这些思考的背后，就是零售业和物流业的知识。如果你的关注点放在这些地方上面，你就可以以此积累相关的行业知识，这也是学习能力的体现。</p><p>即便以后你转换工作，你积累回来的这些“经验”，也会变得更加有用。</p><p>根据你设定的目标，针对性地去提高和积累相应的技能，你才不会浪费时间在无谓的事情上面。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/01/image-20210417175552780.png" class="" title="image-20210417175552780"><h3 id="第三步，到底是选择晋升还是跃升。"><a href="#第三步，到底是选择晋升还是跃升。" class="headerlink" title="第三步，到底是选择晋升还是跃升。"></a>第三步，到底是选择晋升还是跃升。</h3><p>不管你的能力积累得怎么样，你必须要面对一个问题，就是：to be or not to be？</p><p>你要继续从事这份工作，从目前这种劳动类别晋升到更高的层次，还是跳出来，跃升到其他平台，更好发挥自己的能力呢？</p><p>所以这也衍生出另一个问题：你目前的能力资源，是否足够支撑你做出这样的决定？</p><p>你在什么都不懂的情况下，看到别人创业成功，然后你就贸贸然跑去创业，其结果可想而知。</p><p>如果你的能力还不足够支持自己做出某些选择，那你所有的“努力行为”，也只是属于玩票性质而已。</p><p>有本钱当然可以任性，但本钱不足够的前提下，在当前劳动类别中继续深造、积累能力，是一个稳妥的做法。</p><p>记住，晋升是指在同一个劳动类别继续深造；而跃升，则是指从当前的劳动类别，跳到更高层次的劳动类别。</p><p>这两者需要的能力资源，并不一样。</p><p>例如你是一个水泥工，突然不想混下去，然后选择去做一个销售员，那么这种转变，就是跃升，毕竟你从单向体力劳动，转为轻度体力劳动。</p><p>但不管是晋身还是跃升，根据自身的目标，积累相关的知识和能力，你才能够有资本做出相应的选择。</p><h3 id="第四步，试水式实践。"><a href="#第四步，试水式实践。" class="headerlink" title="第四步，试水式实践。"></a>第四步，试水式实践。</h3><p>当你把一些知识和能力积累到一定的程度后，如果没有实践的经验，你运用起来还是无法做到得心应手。</p><p>而通过试水的方式去给自己一个实践的机会，你能够根据实际的反馈情况，有效地调整自己的积累方式。</p><p>例如你想积累写作方面的能力，看了很多书，也练习了很长时间，觉得能力积累的差不多了。可是如果你不把文章发表出来，你根本不知道这篇文章会获得多少反馈。</p><p>没有这些反馈结果，你就无法针对性地调整写作方向，继续提高自己的能力。</p><p>所谓“试水式”，就是一个自己一个了解自己的过程。毕竟你无法一下子就晋升或跃升到更高的层次，你必须循序渐进地把能力发挥出来，获得别人认可后，你才有转变的机会。</p><p>所以，不管你积累什么资源，一定要找机会运用出来。就算你打算创业，也要从实际的事情做起，才能明白到整个创业的操作过程。</p><p>当你能够做到这样子，你的奋斗才会更加高效，你积累回来的经验，也才会更有用。</p><p>这就是所谓的“有效勤奋”了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;你认为自己是一个勤奋的人吗？&lt;/p&gt;
&lt;p&gt;我相信你肯定很“勤奋”，因为你每天都要努力地活着，让自己很好地生存下去。&lt;/p&gt;
&lt;p&gt;问题是，这种“勤奋”，到底能让你产生多少实质的改变呢？&lt;/p&gt;
&lt;p&gt;以下这些状态，你是不是都会遇到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每天重复干着</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>简历帮你争取到面试</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%AE%80%E5%8E%86%E5%B8%AE%E4%BD%A0%E4%BA%89%E5%8F%96%E5%88%B0%E9%9D%A2%E8%AF%95/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%AE%80%E5%8E%86%E5%B8%AE%E4%BD%A0%E4%BA%89%E5%8F%96%E5%88%B0%E9%9D%A2%E8%AF%95/</id>
    <published>2021-04-17T15:26:37.000Z</published>
    <updated>2021-04-17T10:11:40.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、简历中应包含的要素，一个都别落下"><a href="#1、简历中应包含的要素，一个都别落下" class="headerlink" title="1、简历中应包含的要素，一个都别落下"></a>1、简历中应包含的要素，一个都别落下</h3><p>大家在准备简历应当注意“<strong>直接</strong>”两字：能让筛选人能直接地看出本人的教育背景、工作经历和项目经理，并让他们“直接”感到这份简历能纳入考虑范围。</p><table><thead><tr><th>简历中应包含的要素</th><th>目的</th></tr></thead><tbody><tr><td>基本信息，比如姓名，性别，年龄</td><td>1 让招聘方了解候选人的基本信息。 2 以便招聘方通过手机等方式能联系到候选人</td></tr><tr><td>按时间倒叙写教育背景，一般只需要包含高中以上，初中高中等不必写，但需包含专业和学历学位信息</td><td>专业和学历学位等信息向招聘方证明自己的技术背景。</td></tr><tr><td>总结性地列出自己所掌握的技能。比如： 1、 有3年Java经验，有2年Spring MVC经验。 2、有3年Oracle经验，有2年Oracle调优经验。</td><td>一般这些总结点是和职务需求是一致的，这样能让招聘方直接地感受到该候选人的匹配度。在这基础上，可以适当列些能成功帮到自己的总结点。</td></tr><tr><td>按倒叙列出工作过的公司，并列出在这些公司里的项目经验，这部分的技能下文会详细描述。</td><td>在项目经验描述里，能通过项目用到的技术经验等，具体地给出自己“匹配”该岗位的证明。</td></tr><tr><td>用少量篇幅列出自己的兴趣和自我总结</td><td>让招聘公司进一步了解候选人</td></tr></tbody></table><h3 id="2、该如何描述公司的工作情况"><a href="#2、该如何描述公司的工作情况" class="headerlink" title="2、该如何描述公司的工作情况"></a>2、该如何描述公司的工作情况</h3><p>这部分一般是按时间倒叙描述，比如可以按如下的格式写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2015年11月到2017年10月，在xx公司，职务是Java高级开发。离职理由是想进一步发展。</span><br><span class="line"></span><br><span class="line">2012年2月到2015年11月，在xx公司，职务是Java初级开发。离职理由是想进一步发展。</span><br></pre></td></tr></table></figure><p>按此格式写之前的公司情况</p><p>这部分的内容应当尽量靠前，在罗列公司情况时，请大家注意如下的四个要点。</p><p>第一，工作情况可以和项目经验分开写，一般会在后继的项目经验里写具体用到的技术框架以及所做过项目的细节，在这里的工作情况描述里，可以不用过于复杂，让招聘方看到你之前的公司情况即可。</p><p>第二，尽量别出现长时间的“空白期”，比如上份工作是2月份结束的，而下份工作是6月开始的。如果出现持续三个月以上的“不在职状态”，需要在简历中说明情况，比如这段时间你是换城市发展了，或辞职复习考研或复习考公务员，总之得找个能说得过去的理由。</p><p>第三，在简历上，尽量别让人感觉你每份工作都做不长，但不能以此作假。比如我见过有候选人会合并公司，比如2016年11月到2017年3月在A公司，2017年4月到10月在B公司，他为了不让招聘方感觉他换工作太频繁，在简历上就写2016年11月到2017年10月在B公司工作，而故意合并了A公司的经历。这样的话，如果遇到背景调查，会露馅，即使有些公司不做调查，在劳动手册等材料上也能反应出真实的工作情况，所以这种做法有一定的风险性。</p><p>这里推荐的做法是，不要合并公司，但可以写明理由，比如当时小王是被外派公司A以人力派遣的形式外派到B公司，但没过多久A公司因某种原因不再具备人力派遣的资质了，这时小王就不得不终止与A公司的合同转而和B公司签约，这样虽然看上去小王是换了公司，但实际上没有。通过类似的合理解释，招聘方就不再会质疑小王的工作能力和稳定性了。</p><p>第四，可以写上合适的离职理由，尤其当你短时间里换工作比较多，可能引起招聘方的质疑的情况里，更该考虑些合适的理由。</p><p>合理的离职理由可以是，想为自己提供一个更大的发展空间，或想通过升级来独当一面，以此进一步提升自己的能力，或公司因资金等方面的原因倒闭了。总之，这不是我主观上不稳定，而是由于客观原因导致我不得不换工作。</p><p>而可能会导致没面试机会的离职原因是，待遇问题（虽然大家心知肚明，但不能这样写），或无法承受大压力，或同事领导排挤。这类理由往往会暴露出候选人的缺点，所以不建议大家采用。从这意义上来讲，“合同期满”也不是一个好的离职原因，因为如果候选人能力强，那么为什么原公司不和你续约呢？</p><p>总之，在描述公司情况时，一旦出现会让招聘方感觉你能力不强或不稳定时，一定得醒目地写上足以信服的理由，这样你的简历才会有机会被继续被读下去，进而你才会有技术面试的机会。</p><h3 id="3-描述项目经验的技巧"><a href="#3-描述项目经验的技巧" class="headerlink" title="3 描述项目经验的技巧"></a>3 描述项目经验的技巧</h3><p>之前已经提到过，招聘方非常注重候选人简历上相关技术项目经验，因为这至少能有效地证明候选人实践过相关技术，而不是只具有理论知识。</p><p>具体而言，招聘方首先会看候选人最近半年的项目里用的是否是和本岗位相关的技术或框架，如果是，那么说明候选人能在入职后能直接上手干活。其次，会看候选人所有项目经历中和本岗位所用技能（或框架）一致时间年限，一般招聘方会对这个年限有个最低的标砖，当然越长越好。</p><p>如果大家自己感觉项目经历明明很匹配但最终却连面试的机会都没，那么问题大多就出在这个环节，下面我们来具体分析下描述项目经验的技巧。</p><h4 id="3-1尽量把学习培训项目和毕业设计项目往商业项目上靠"><a href="#3-1尽量把学习培训项目和毕业设计项目往商业项目上靠" class="headerlink" title="3.1尽量把学习培训项目和毕业设计项目往商业项目上靠"></a>3.1尽量把学习培训项目和毕业设计项目往商业项目上靠</h4><p>商业项目是指能挣钱的项目，和它对应的就是些不以挣钱为目的的学习项目或毕业设计项目。正因为客户付了钱，所以商业项目的要求要远远高于学习或毕业设计项目，这也是为什么招聘公司会看重商业项目而会主动过滤学习项目的原因。</p><p>职位描述上的相关技能年限一般只是指商业项目经验，而一般不会包括学习项目经验。所以对于一些介于商业项目和学习项目之间的项目，尽量当成商业项目来写。</p><p>比如小张在大三时帮计算机系的王老师所在的ABC软件公司干了半年的活，如果小张在简历上写：“在校期间，从x年x月到x年x月完成了xx系统，用到了xx技术”，那么这多半会被当成类似于课程设计的学习经验，但如果再加上如下关键性的描述：“这个系统是属于xx公司的xx商业项目里的一部分，我和另外三位开发人员做了半年，最终这个系统成功上线并在客户xx公司的环境里投入运营”，那这样小张的商业项目总年限里就能加上这半年时间了。</p><p>又如小李在做毕业设计时，花了7个月的时间参与了导师的一个电商商业项目，他主要的工作是设计一个调度算法，但也参与了一些诸如订单管理模块的工作。如果他就平淡地写一句，毕业设计是xx，毕业论文是xx，那么招聘方看过就算了，也不会认为小李在做毕业设计时还有过商业项目经验，这样小李未免有些吃亏。</p><p>但如果这样写：“在x年x月到x年x月的7个月里，在毕业设计中，我参与了xx公司的xx电商项目，客户方是x，我参与了订单管理和xx模块，并设计了其中的调度算法，在我的毕业论文里，详细介绍了这种做法”。文字没修改太多，但足以让小李增加7个月的商业项目经验。</p><p>在招聘过程中，我们经常会看到有些候选人参加了培训学校，在里面也做了一些实训项目。如果这些项目是用来让学生练手的，而没有产生商业价值，那么虽然这些项目可能来自真实项目，名字也叫xx实训项目，但非常可惜，我们没法把它当成商业项目。不过我们看到过一份印象比较深刻的简历，某候选人小丁在某三个月的时间内，一边参加培训，一边还在朋友的公司里兼职做着xx信息管理系统的项目。那么如果小丁能很好地在简历中很好地说明这个情况，而且还能在面试中很好地回答相应的问题，那么我们不得不相信小丁在这个三个月里确实做的是商业项目。</p><p>对于高级程序员而言，他们的项目年限一般会超过3年，所以多挖掘出来的商业项目年限就属于锦上添花了。不过不少公司在招聘时往往会设个最低年限标准（一般是1年半到两年），这对刚毕业的或工作经验小于2年的初级程序员而言无疑是道坎，所以如果大家处于这青黄不接的时间段里，就更得挖掘这些“严格意义上还算商业项目”的项目经历并写到简历中，这至少能帮大家争取到更多的技术面试机会。</p><p>不仅如此，我们发现大多数初级程序员的水平其实也差不多，这时就得看谁的商业项目经验丰富了。比如有次我们无法从两位候选人中权衡，因为他们的综合条件和面试情况都差不多，但其中有一位在大三阶段有段为期6个月的商业项目实习经验，另一位没有（也有可能他也有但没当成商业项目来写），这种情况下我们就录用了有实习经验的候选人了。</p><h4 id="3-2通过具体案例来看项目经验该怎么描述"><a href="#3-2通过具体案例来看项目经验该怎么描述" class="headerlink" title="3.2通过具体案例来看项目经验该怎么描述"></a>3.2通过具体案例来看项目经验该怎么描述</h4><p>假设某公司需要招一个Java高级开发，如下是职位描述。<br>1、计算机及相关专业毕业，3年以上Java Web项目开发经验；熟悉Linux平台。<br>2、精通JAVA 编程，熟悉Spring、Spring MVC、Mybatis/Hibernate等开源框架，熟悉常用cache机制,Jsp/Servlet等技术。<br>3、熟悉Tomcat、Nginx等应用服务器的配置和优化。<br>4、熟悉数据结构和算法，熟悉Java多线程开发。熟悉MySQL、Redis，熟悉数据库索引。<br>5、了解Web前端技术，包括HTML5/CSS/Javascript等。<br>6、拥有良好的沟通能力和文档能力。<br>7、勤奋而善于思考，愿意不断挑战和提升自己。</p><p>这里先说个技巧，如果候选人能通过简历让招聘方确信，在最近的项目里他用到了不少和招聘岗位相关的技术，那么他得到面试机会的可能性就会大大提升，因为招聘公司会认为候选人能入职后很快上手，而不会有太长的熟悉期。所以，我们可以按如下思路改写最近做的一个项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那么我们就可以根据职位需求，从如下几个方面来描述项目经验。</span><br></pre></td></tr></table></figure><p>第一，简要描述项目的背景，比如时间范围，客户是谁，项目规模有多大。</p><p>从x年x月到现在（这个时间范围至少是最近半年），我参与某外汇交易系统，客户是xx银行，这个项目组的构成是，1位项目经理外加10位开发，总共的规模大概在80个人月左右。</p><p>第二，大致描述项目的需求和包含哪些模块，然后简要说下你做了哪些模块，同时说下在这个项目用到的开发工具和主要技术点，这部分的描述如下所述。</p><p>这个外汇交易系统包括挂盘撮合成交、实盘成交、反洗钱和数据批处理等模块，我主要负责了挂盘撮合成交模块，其中用到了Spring MVC架构，数据库是Oracle，用Mybatis实现的ORM，该系统是运行发布在Weblogic服务器上，我们还用了Nginx来实现负载均衡，用Redis来缓存数据。在这个项目里，我还用到了JS实现了一些前台页面。</p><p>这里请大家注意如下的要点。</p><p>1、招聘方在看简历时，更关注的是用的技术，所以这里无需过度展开该项目里的业务细节，比如无需用大篇幅来写挂盘撮合成交模块里干了什么事情。</p><p>2、如果在这个项目里用到了职位介绍里给出的技术，应尽量写在项目描述里，但也要不能不顾事实地一股脑全写上。</p><p>第三，这里可以在刚才的基础上展开写这些技术在项目里是如何用的，以此来进一步证明你和所应聘职务的匹配度。同样这里也应围绕技术，而别多写业务细节，大家可以参考如下的范例。</p><p><strong>具体而言，在这项目的挂盘撮合成交模块里，我们用到Spring MVC框架，用到了其中的拦截器来拦截非法的挂盘订单请求，在数据库层面，我们还把一些常用数据放入Redis里，在Redis里我们用到了list和set这两种数据类型，而且还用到了master-slave模式。在使用Nginx时，我们是通过配置来避免出现Session粘滞的问题。</strong></p><p>  如果大家只写用到过Spring MVC和Nginx，那么筛选简历的人看一眼就过了，最多认为大家用过。但如果大家再写一些只有用过才能知道的细节点，比如Nginx的master-slave模式，那么就会给招聘方留下比较深刻的印象，大家给他们的感觉就会是“不仅用过，而且熟悉（或精通）”。</p><h4 id="3-3这些亮点你大多做过，不加在简历中有些可惜"><a href="#3-3这些亮点你大多做过，不加在简历中有些可惜" class="headerlink" title="3.3这些亮点你大多做过，不加在简历中有些可惜"></a>3.3这些亮点你大多做过，不加在简历中有些可惜</h4><p>  我们见过不少简历，在描述项目时，也能像上文一样，能根据招聘职位的具体要求展示出自己的匹配点，这种简历属于“达标”，即可以纳入考虑范围。在这个基础上，如果大家在项目里有下表列出的亮点，一定请写上，这就是大家优于别人的地方。</p><table><thead><tr><th>可以加入的亮点</th><th>怎么加</th></tr></thead><tbody><tr><td>JVM调优方面</td><td>请参考第九章，里面有专门的描述</td></tr><tr><td>设计模式方面</td><td>请参考第八章，里面有专门的描述</td></tr><tr><td>数据库调优方面</td><td>1可以说在项目里用过批处理预处理事务等高级知识点。 2 能通过监控查看哪些SQL语句需要调优。 3 能通过索引执行计划等方式对SQL语句进行优化. 4 进一步的话，能通过数据库集群等方式分散对单个数据库的压力. 5 如果做过，也可以写一些关于NoSQL和大数据方面的经验</td></tr><tr><td>Spring MVC等架构方面</td><td>1 用过其中诸如拦截器、AOP和事务等高级技能点。 2 在搭建框架时，能一起参与并熟悉如何通过框架来提升代码的可维护性。</td></tr><tr><td>学习和解决问题的能力特别强</td><td>比如可以写，在项目里，自己被分担一块大家都不大熟悉的技能，但你在短时间里就完成了技术调研并把它用到项目里。</td></tr><tr><td>能承担大的工作压力</td><td>1 由于客户方催进度的原因，这个项目需要加班（总之加班原因不是你造成的） 2 在这种情况下，你能和你的团队一起连续奋斗，最终成功地完成进度。</td></tr></tbody></table><p>上述的一些技能要求未必会出现在职位描述里，但确实都属于亮点，而且在大家的项目里，多少会用到些，所以不加有些可惜。当然，如果大家有其它的亮点，也可以加上，毕竟这能提升大家简历的价值。</p><h4 id="3-4多写些和项目管理相关的技能"><a href="#3-4多写些和项目管理相关的技能" class="headerlink" title="3.4多写些和项目管理相关的技能"></a>3.4多写些和项目管理相关的技能</h4><p>我们见过不少简历，在其中更偏重技术或诸如沟通和协作方面的能力，但事实上，项目管理方面的技能同样重要。这里可能会有个误区，不少人认为初级程序员的简历无需写项目经验，但事实上，项目管理技能也是靠积累的，哪怕刚工作1个月，也能积累这方面的能力。</p><p>在这方面，项目经理更偏重于如何根据项目需求合理地分配任务和协调进度，对于程序员而言，则可以在简历中写项目管理的方式以及如何使用常见的管理软件来提升项目管理的效率。</p><p>这里我们就以“敏捷开发”为例，向大家展示下如何介绍自己项目管理的方式。</p><p>我们这个项目采用了敏捷开发的模式，具体而言，我们会根据项目总体需求，设置若干个发布点，在时间上，每隔1个月就会设置一个。根据任务的优先级，我们先会大致定下每个发布时间范围内的大致任务，而在每个发布时间范围内，会根据当前情况适当微调。</p><p>而且，我们项目组还引入了“每天站立会议（Stand up Meeting）“的形式，每天我们项目组会用大致20分钟的时间一起讨论下每人已经完成的任务、要做的任务和遇到的问题，这样即使遇到阻碍性的问题，也不会耽搁整个项目很久的时间。</p><p>相关的内容无需多，大家只需列些“敏捷开发的必做点”，以此来证明自己实践过这种开发方式即可。如果招聘公司也是采用类似的项目管理方式，那么这点一定是个很好的加分项，即使招聘公司采用其它方式，比如瀑布模型，那么你写上这话，招聘方的评价就不会仅仅是“熟悉项目开发的技术”，而且还是“了解并实践过XX项目管理方式，对项目管理有一定的了解”，这样这份简历获得面试机会的可能性就大大增加了。如果大家在项目里用到的不是敏捷管理模式，而是其它的管理方式，也可以照着这个思路写。</p><p>此外，正规的项目多少或用些项目管理的工具，大家也可以在简历中列一些自己用过的，以此来进一步证明项目管理方面的经验。在下表里，我们总结了一些常见的开发人员能用得上的项目管理工具。</p><table><thead><tr><th>工具或软件</th><th>项目管理方向</th><th>能起到什么样的作用</th></tr></thead><tbody><tr><td>JUnit</td><td>单元测试</td><td>开发人员在开发完成后，可以用Junit来编写自己代码的单元测试代码， 运行单元测试代码后，能测试自己开发的模块。</td></tr><tr><td>Maven</td><td>构建项目</td><td>通过Maven，我们能给项目引入必备的jar文件， 也能方便地编译(build)和发布项目代码。</td></tr><tr><td>Jenkins</td><td>持续集成工具</td><td>（一般会和Ant一起用）我们一般会用重复的工作来发布不同版本的项目， 比如运行ant脚本，把生成的jar放入指定的Linux目录并设置一些script文件的可运行权限。 我们可以通过设置Jenkins脚本来配置这些重复的工作。</td></tr><tr><td>Jira</td><td>缺陷或任务管理</td><td>每当遇到一个Bug或一个新任务，我们可以建一个jira， 此时该Jira状态是Open，程序员开始开发时，会设置成In Progress， 完成开发后能设置成In QA，这样测试人员就能介入测试， 测试完成后，测试人员能把它设置成In UAT，一旦把该任务部署到生产环境， 就能Close这个Jira。也就是说，通过Jira，我们能在项目里很好地跟踪和 监控具体问题和任务的当前状态。</td></tr><tr><td>Git</td><td>版本管理</td><td>通过Git或SVN等版本管理工具， 在项目里我们能方便地建立提交或回退各人的修改，还能分支版本。 Git还有个好处：可以设置成“评审后才能提交”的模式， 这样某人要往主版本提交的代码必须要经过一人或多人的评审， 这样就能很好地控制代码的质量。</td></tr><tr><td>Autosys或Crontab</td><td>用于定时跑脚本任务</td><td>比如我们要定时跑一个脚本， 我们就能通过Autosys或Crontab来设置， 通过Autosys，我们更能方便地设置任务间的依赖关系， 比如A任务跑好后B任务才能跑，而且还能查看任务运行的状态是成功还是失败。</td></tr><tr><td>Sonar</td><td>代码质量管理</td><td>通过Sonar，我们不仅能检查代码是否还有bug， 还能查看代码的质量，比如代码的注释率是多少， 单元测试覆盖率是多少。Sonar还能给出一些代码方面的建议。 总之，通过Sonar，我们能提升代码质量。</td></tr></tbody></table><p>具体而言，大家可以在简历加上如下的内容：在这个银行（或其它）项目里，我们用Maven来管理项目，用Git做版本管理，用Junit来做单元测试，用Jira来做bug管理，在代码上线前，我们还会用Sonar来扫描代码，如果发现一些可改进点，比如Junit覆盖率不高，我们会及时改正。</p><p>大家在简历中写这部分的内容时请注意如下的两个要点：</p><p>1 在项目管理方面一般都会用到些工具，也就是说，大家可以写上在自己项目里用到的工具以及这些工具应用在哪些方面，但别什么都不写。</p><p>2 面试官在看到相关描述后，一般会在面试中询问些细节，比如Jenkin的配置方式等，也就是说，大家不仅要写，还得适当地了解下这些工具的使用细节，以备面试时的提问。</p><h3 id="4-投送简历时的注意要点"><a href="#4-投送简历时的注意要点" class="headerlink" title="4 投送简历时的注意要点"></a>4 投送简历时的注意要点</h3><p>简历准备得再好，如果用不恰当的方式投递出去，同样无法得到面试机会，所以大家在发送简历时，应当注意如下的要点。</p><h4 id="4-1不要发送“万能“简历，根据具体的职位要求进行微调"><a href="#4-1不要发送“万能“简历，根据具体的职位要求进行微调" class="headerlink" title="4.1不要发送“万能“简历，根据具体的职位要求进行微调"></a>4.1不要发送“万能“简历，根据具体的职位要求进行微调</h4><p>这可能是不少求职者的“通病”，他们往往就准备一份简历，然后看到一个合适的工作机会就发一份，也不关注这个公司的行业背景，也不看这个职位的具体要求。</p><p>其实大家的简历是“闭门造车”的形式写出来的，只能“尽可能”地描述自己掌握的技能（无法完全描述出你项目里用到的所有技能要点），而每个公司的职务要求一定不会完全相同，所以大家在发送简历前一定得根据具体的职位需求改写相关的项目经验描述，以求达到“匹配度”最高的效果。</p><p>相反，如果大家针对不同的公司发的是同一份简历，那么就得撞大运了，这样一定会失去不少“匹配度不高“的面试机会，其实修改简历所用的时间不会太多，但效果一定是大相庭径。</p><h4 id="4-2在招聘会上，尽量要口头说出你和这个职位的匹配点"><a href="#4-2在招聘会上，尽量要口头说出你和这个职位的匹配点" class="headerlink" title="4.2在招聘会上，尽量要口头说出你和这个职位的匹配点"></a>4.2在招聘会上，尽量要口头说出你和这个职位的匹配点</h4><p>在招聘会上，大家只能是发送同一份简历，在这种情况下，大家一定得尽可能地和招聘方交流几句，同坦诚的措辞，口头说下你和这个职位的匹配度，同时让招聘方感受到你热切想得到这份工作，这样比“递交简历无其它互动“的效果要好很多，至少能给招聘方留下些许印象。</p><h4 id="4-3简历以正文形式发送，别让招聘方觉出敷衍"><a href="#4-3简历以正文形式发送，别让招聘方觉出敷衍" class="headerlink" title="4.3简历以正文形式发送，别让招聘方觉出敷衍"></a>4.3简历以正文形式发送，别让招聘方觉出敷衍</h4><p>在很多场合下，大家是通过邮件的方式发送简历，在这种方式下，由于只是通过文字，无法面对面直接交流，所以大家应当尽量让招聘方感受到自己求职的诚意，至少别让他们感觉出“敷衍”。</p><p>这里来举些可能会让招聘方感受到“敷衍”的例子。</p><p>例子1，从邮件的标题和称谓上，看不出这份邮件是给本公司专门定制的。比如我们经常会收到这样的简历，标题是“应聘xx岗位”，开头是，尊敬的先生/女士，在其中第一没有公司的称谓，第二我们已经在招聘要求里写了负责收简历的是人事王先生，但这里没有具体的称谓，这就会让我们感觉这份邮件是通用的，而不是专门发给我们公司的。</p><p>恰当的做法是，在邮件标题里写上具体的公司名，比如应聘xx公司的xx岗位，在开头上写，xx公司，尊敬的人事王先生，这里如果没有留收简历人的称谓就写尊敬的人事，这样就会让人感到候选人在这份邮件至少是下过功夫的。</p><p>例子2：从邮件列表里，我们能看出候选人是群发邮件，把同一份简历发给不同的公司。这种情况不多，但有，恰当的做法是，在一封邮件里，只给一个公司发送求职信息。</p><p>例子3：有些候选人在邮件里，直接用附件的形式发简历，而没有任何正文的内容。这就无法让招聘方感觉到候选人的诚意了。</p><p>比较恰当的做法是，候选人还应当在邮件里写上如下样式的求职信。</p><p>xx公司，尊敬的人事张先生：</p><p>我在xx招聘网站上看到您这边的招聘Java高级开发的信息，特来应聘。</p><p>我叫xxx，今年xx岁，xx大学xx系毕业，本科学历，手机是xx。</p><p>我有x年java经验，用过Spring MVC等技术（根据职位描述列出用到过的其它Java技术），数据库方面，我用过xx，也有过调优经验（数据库方面的经验也请和职位描述一致）。再根据职位描述写一些自己和这个岗位相匹配的技术。</p><p>我非常愿意加入贵公司从事Java高级开发的工作，我的详细情况请看我的简历，如果可以，我非常愿意向您这边提供更多的个人信息。</p><p>最后列上署名</p><p>因为有些公司的邮箱出于安全因素，会过滤附件，所以还是建议大家以附件形式发简历的同时，在正文里也加上简历的内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、简历中应包含的要素，一个都别落下&quot;&gt;&lt;a href=&quot;#1、简历中应包含的要素，一个都别落下&quot; class=&quot;headerlink&quot; title=&quot;1、简历中应包含的要素，一个都别落下&quot;&gt;&lt;/a&gt;1、简历中应包含的要素，一个都别落下&lt;/h3&gt;&lt;p&gt;大家在准备简</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>别急着写文章，先练好如何表达一个观点</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/09/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/09/</id>
    <published>2021-04-17T15:18:37.000Z</published>
    <updated>2021-04-17T10:12:41.409Z</updated>
    
    <content type="html"><![CDATA[<p><strong>你必须通过表达观点去改变别人，才能生存下去。</strong></p><p>比如走进一家面馆，你会说，我想来一碗牛肉面。然后服务员会给你端来一碗，你通过对她<strong>行为上的改变</strong>，才不会让自己挨饿。</p><p>或者你参加面试，你通过表达观点，让简历平庸的你，立即让面试官眼前一亮。他决定录用你，这是他<strong>决策上的改变</strong>，然后你才可以开始挣钱。</p><p>所以，为什么你要表达一个观点，其本质就是：<strong>是否可以改变别人。</strong></p><p>如今多数人的表达都更习惯自嗨，为了<strong>想要表达而表达，叫自我思维表达。</strong></p><p>而我们今天所讲的是<strong>为了别人改变而表达，叫做用户思维表达。</strong></p><p>这两种表达方式的差别在于，自我思维的表达效率高，但市场效率低。</p><p>比如你和一个老友聊天，一见面就可以聊，根本不需要准备。但是聊天通常只能面对一个人，最多几个人。</p><p>而用户思维表达刚好相反，表达效率低，但市场效率高。</p><p>比如你准备一场稍微正式的演讲，少说需要花个七八天时间。你需要考虑台下到底有50人还是500人，能否被你的演讲触动。</p><p>所以，如果你希望自己的表达，市场效率更高。唯一所需要做的，就是从<strong>自我思维表达</strong>切换到<strong>用户思维表达。</strong></p><p>有一个营销心理学中的模型，可以让我们Get到完整的解决办法。</p><p>我把它称为<strong>“培根三明治”模型</strong>，由两片面包，培根，和蔬菜构成。</p><p>1、上层的面包是指开头，热烤的面包香味可以立即吸引用户，这里重要的是<strong>建立“用户链接”。</strong></p><p>2、而培根是论点，份量最少但最核心，作用是进行<strong>“感性启发或理性启发”。</strong></p><p>3、蔬菜部分是指论据，可以由生菜、西红柿等新鲜食材构成，这里的重点是<strong>建立“鲜活性效应”。</strong></p><p>4、下层的面包是结尾，它和开头遥相呼应，都需要激发用户的情感，重点是<strong>提供“情绪价值”。</strong></p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/09/image-20210417180656664.png" class="" title="image-20210417180656664"><p>假如你和朋友刚吃完火锅，门口有个摊贩问你：“需要来罐凉茶吗？”你肯定纳闷，我现在要凉茶干什么？</p><p>但这时候别人吼出响亮一声“怕上火，喝王老吉”，你多半就可能会买一罐了，因为吃火锅容易上火嘛。</p><p>这个就叫<strong>“建立用户链接”</strong>，凉茶本来和你没有关系，但上火就有关系了，而凉茶就可以消火。</p><p>这也是建立用户链接的第一个方法<strong>，让用户关注他们自己。</strong></p><p>而另外一个方法是，引起他们的兴趣。</p><p>比如说一些有反差的事例：我这辈子从来没有用过香水，但是昨天，我却一口气买了三种不同味道的香水。</p><p>或者提供一个让人震惊的事实：你知道吗？住巷尾那个人，眼睛根本就没有瞎。他这么多年处心积虑，是为了……</p><p>又或者讲个故事，比如卡夫卡《变形记》的开头：当格里高·萨姆莎从烦躁不安的梦中醒来时，发现他在床上变成了一个巨大的甲虫。</p><p>当然，你的整个表达都应该引起用户兴趣，但最好在开场30秒之内就要做到第一次兴趣点的激发。</p><p>04 培根</p><p>在设置“培根”（论点）时，许多人都会想，如何才能有好的观点博人眼球呢？</p><p>但请注意，博人眼球这种把戏，在设置“上层的面包”（开场）时，比划比划就行了。</p><p>在这个环节要给最好的肉，给点实在的东西。</p><p>但这个”实在的东西“绝不是故作高深的理论，切记没人喜欢听说教。</p><p>人们更愿意通过你表达，获得<strong>感性启发或理性启发。</strong></p><p>在《放牛班的春天》里，教导主任通常都是对学生一顿臭骂，或一通说教，这毫无作用。</p><p>但马修老师的表达方式就不一样。比如他对皮埃尔说到，“凡事都有可能，永远不说永远”。这句话直接坚定了皮埃尔唱歌的信心，终让他成为享誉全球的音乐大师。</p><p>因为我们大脑中感性部分和理性部分的长期博弈，每个人都有及时行乐和长期自律的双面性。</p><p>我们有时候很想狂吃一顿火锅（及时行乐），但是又想通过长期锻炼来保持身材（长期自律）。</p><p>所以，针对这个特征，你可以选择要么唤起情绪化、负面、短浅的感性面，要么唤起理性、自律、长远考虑的理性面。</p><p>比如迷蒙的文章，“女人好好打扮就是为了取悦男人？瞎扯！”这就立即唤起了广大女性同胞渴望独立，活得自主的女权情绪。（感性启发）</p><p>再比如道长的这篇文章，没有更多说表达观点的技巧。而是更注重唤起你的理性思维，让你自己去思考你应该如何改变。（理性启发）</p><p>05 蔬菜</p><p>但如何去唤起呢？这就是整个观点的“蔬菜”（论据）部分。</p><p>蔬菜不能太多，三种最合适。</p><p>而针对感性启发和理性启发，我们是否需要两种不同的办法呢？</p><p>答案是不用，你只需要提供一种东西就可以，<strong>鲜活性效应（Vividness Effect）</strong>。</p><p>这最早由心理学家凯勒·阿兰德提出，是指一种人类被感性情境轻易打动的心理。</p><p>比如有人给你说，“有300万犹太人被送往奥斯维辛集中营的毒气室被杀害”，你可能感受不太明显。</p><p>但如果看到下面这张图片，你是否依然能够听到那些指甲划过硬墙，撕心裂肺的声音。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/09/image-20210417180746701.png" class="" title="image-20210417180746701"><p>你可能说，不能用图片怎么办呢？</p><p>那就尽量用文字去塑造这种场景感：</p><p>比如“踩惯了红地毯，会梦见石板路”，就比“我偶尔会怀念故乡”要好很多。</p><p>在这里你可能有一个疑问，最有说服力的不是数据吗？</p><p>NO! 冷冰冰的数据本身，只能提供逻辑。只有它与场景感相连接，唤起人们的感受，才能影响他们的行为。</p><p>比如“一年买了7.17亿杯奶茶” ，你感受不大。</p><p>但“一年买了7亿杯奶茶，可绕地球赤道两圈。”这个感受就很深刻了。</p><p>06 下层的面包</p><p>最后，是“下层的面包”，结尾部分。</p><p>如何去写结尾，是小学三年级开始学写作文时，老师就会教我们的东西。</p><p>但你可能不知道结尾最真正的效用，<strong>提供情绪价值（Emotional value）。</strong></p><p>什么是情绪价值呢？</p><p>比如你今天悄悄走到一个女同事旁边，在她耳朵旁悄悄说了一句，今天这件衣服，真的很适合你。</p><p>这时候你就给同事提供了自信、满足、窃喜的情绪价值。</p><p>在表达过程中，你之前做了那么多铺垫，不就是为了你表达的终极目标“改变别人，促使行动”吗？</p><p>而通常人们都是在有情绪的情况下才会作出改变。</p><p>比如别人一激动，就转发你的文章。头脑一发热，就把那件3000块的衣服买了</p><p>用户在享用了你的“上层的面包”、“培根”和“蔬菜”后，其实大多都有一个既定的情绪了，只需要你准确提供他们所需要的情绪价值就行。</p><p>比如奥巴马卸任演讲的结尾其中9个单词：</p><p>Yes We can.是的，我们能行。</p><p>Yes We did.是的，我们做到了。</p><p>Yes We can.是的，我们能行！</p><p>这是一种完成使命后的坚定，也是英雄迟暮的感怆，也是一种低头洒泪后、仍目光坚毅不断前行的国家气魄。</p><p>相信在台下，他的所有簇拥者，都会被这个情绪所影响深远。</p><p>07 结语</p><p>怎么样？关于如何去表达一个观点，脑子里是否一下就清晰了呢？</p><p>相信你再也不会担心这样的场景：</p><p>有一天，你的领导突然让你在一个正式场合，分享个什么东西。</p><p>你可以十分优雅地回应他，请给我十分钟时间准备。</p><p>然后你迅速躲到卫生间最里间的马桶上，拿出纸笔，画下道长今天送你的这个“培根三明治”，把面包、培根、蔬菜的部分，充分填充你惊为天人的想法。</p><p>然后你轻步上台，让所有领导来宾全部懵逼，太特么有才了！</p><p>都写得有点激动了。深吸口气，平静下来。</p><p>此时只想说，观点请收下，练习最重要，相信你可以！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;你必须通过表达观点去改变别人，才能生存下去。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如走进一家面馆，你会说，我想来一碗牛肉面。然后服务员会给你端来一碗，你通过对她&lt;strong&gt;行为上的改变&lt;/strong&gt;，才不会让自己挨饿。&lt;/p&gt;
&lt;p&gt;或者你参加面试，你</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>程序员需要避免的 10 个坏习惯</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9C%80%E8%A6%81%E9%81%BF%E5%85%8D%E7%9A%84%2010%20%E4%B8%AA%E5%9D%8F%E4%B9%A0%E6%83%AF/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9C%80%E8%A6%81%E9%81%BF%E5%85%8D%E7%9A%84%2010%20%E4%B8%AA%E5%9D%8F%E4%B9%A0%E6%83%AF/</id>
    <published>2021-04-17T15:18:37.000Z</published>
    <updated>2021-04-17T10:12:03.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-休息不够"><a href="#1-休息不够" class="headerlink" title="1. 休息不够"></a>1. 休息不够</h2><p>我敢肯定你们很多人或者说几乎所有人都对这个坏习惯感到十分罪恶。我也是，对没有休息或休息不够依然有罪恶感。曾有一段时间，我凌晨六点入睡，中午一点左右起来吃午饭，一直工作到第二天凌晨六七点。这简直太常见了，几乎每天都是如此。在工作任务紧急的时候，我做过许多可笑的事情。我想我们每个人面对DDL的时候都有过这样的情况，我要说的不是这种，而是你的日常习惯。</p><p>我建议你每天尽量多休息。我不能说那种具体而微的计划，因为每个人都不一样，但在一般意义上，你应该每小时都应该起身伸展四肢，活动一下，喝杯咖啡，吃点东西。很多时候，如果你思路停滞，那你需要休息一下，大脑得到休息有助于更容易地解决问题。所以找到适合你的休息方式。即使你认为自己不需要休息，但也试一下，你会发现自己的效率提高了不少。</p><h2 id="2-拒绝寻求帮助"><a href="#2-拒绝寻求帮助" class="headerlink" title="2. 拒绝寻求帮助"></a>2. 拒绝寻求帮助</h2><p>这一条在学习和工作场景中都很常见。我们很多人都不寻求帮助。原因很多，但我认为最主要的原因无非是自尊以及害怕让人认为自己啥也不会。我们很多人都有冒名顶替综合征，觉得自己不完全胜任自己的工作。我在公司里、在和客户打交道时、甚至在上课和辅导中都有这种感觉。我们认为寻求帮助会强化这种感觉。但事实上，它浪费了大量时间，阻碍了你的成长。</p><p>其他真正的开发人员们都是视频或书籍一般的资源，甚至要比这些好太多。他们可以直接回答你的问题，帮助你真正的理解它。 只有混蛋才会因为你问问题而批评你，这时候我会尽力避开这些人。 如果你想要自己找到答案，不想寻求帮助，那也没问题，给自己一个时间限制。当你的前辈就在你旁边，他可能知道或至少可以帮到你的时候，千万不要浪费几天时间来寻找答案。</p><h2 id="3-停止学习"><a href="#3-停止学习" class="headerlink" title="3. 停止学习"></a>3. 停止学习</h2><p>我不管你是否是从业20余年的高级开发人员，你应该一直把自己当成一个学生。这比大多数职业的要求更高，因为这一行总在变化。没有一个开发人员可以知道所有事情的全部内容，他们这一分钟这样做，下一分钟就有变化发生，他们就必须学习更多。如果你骄傲自满，停止阅读、学习，你必然会落后。即便你有一份不需要学习任何新东西的工作，一旦你失去了那份工作（这并非不可能发生），你会远远落后。所以即使有这样的工作，我也建议你边工作边学习。</p><p>不管你喜欢那种语言、框架、库，你都要及时更新你的知识。如果你的职位需要的只是旧知识，这也是可理解的，因为很多领导倾向于认为如果公司还没没落，那就没必要修复。所以你仍然会发现有些团队用着过时的、不受支持的技术，只因为该技术还能运行。如果你边工作边学习这方面的新东西，那你就可以向团队展示更快、更高效、更简单的新技术是可能的。你或许能够说服他们更新技术、改善公司。</p><h2 id="4-混乱的代码"><a href="#4-混乱的代码" class="headerlink" title="4. 混乱的代码"></a>4. 混乱的代码</h2><p>这一条更多地是一种技术习惯，但也可能意味着很多事情。你应当以一种直观、高效、安全的方式写代码。这在自学的时候简直太难了，因为在相关的课程中，你学到的不是写某些代码的最佳方法，而是导师认为这么写最容易理解一些核心概念。所以，你必须进行一些额外的研究，找出清理你代码的最佳方法。</p><p>我绝对建议你使用“<strong>避免重复代码原则”（DRY principle，don’t repeat yourself</strong>）。如果你遇到常见的代码块，那就创建某种“类”（class）或“函数”（function）来合并这部分功能，而不是仅仅重复它。这让代码更加简洁，节省了大量代码行，并且便于他人使用。 你也要注意性能，比如压缩图片、缩小JavaScript和CSS。你可以使用task runner（如gulp）或其他工具自动完成压缩，面对小型任务，你甚至可以使用minifier.org等手动完成。</p><p>另外，不要进行不必要的API接口调用，要使你的全栈应用程序以尽可能少的请求完成你需要的全部功能。以及测试……我在这上面犯了很多错，没有做足够的测试。就我所知，单元测试有助于搭建更健全的应用程序，避免潜在问题，节约时间和开销。但我就是很讨厌它，这可能是我最坏的习惯之一，也是我成为更好的开发人员需要解决的大问题。有时候我们回了节约时间减少测试，但在现实中，这样做会降低应用程序的性能、效率和可读性，而且与一开始就采用正确的方法相比，它可能在将来引起更大的麻烦。所以请记住这一点。</p><h2 id="5-工作和生活的不平衡"><a href="#5-工作和生活的不平衡" class="headerlink" title="5. 工作和生活的不平衡"></a>5. 工作和生活的不平衡</h2><p>工作和生活的平衡真的很重要，尤其是当我们成家以后。不管什么类型的程序员都要花大量的时间在工作上，这有很多原因：事情总在发生变化；我们遇到的问题让我们寸步难行；我们需要研究这些问题等等……这就导致了很多时候，我们不得不工作到很晚、很早就开始工作、周末也加班。这会让你远离生活中的一切，比如你爱的人们、你的个人爱好。你可能喜欢运动、远足或是在外吃大餐，但假如你一直要加班，你就没法做这些让你快乐的事情。</p><p>我在这个领域有很多经验。我和妻子有两个孩子，其中一个患有自闭症，但我没法像我想的那样花大量的时间陪他们。我面临着双重困境，因为我既要处理编码问题，又要处理内容创作者的问题，要不断地提出新想法，有质量地记录下来等等。</p><p>如果你是自由职业者，为自己工作，所有的生计都取决于完成工作，你只有把所有的事情做完才能拿到报酬。有报酬，也就必然得承受持续不断的担忧：自己是否能跟上进度、自己能否完成任务。压力真的很大，让我们不得不把其他事情从我们生活中挤走。并不是说在公司工作的人就不会经历这些，而是说当你需要考虑所有的事情的时候，压力等级完全不同。所以我很同情那些有自己生意的人。</p><p>但即便如此，你也不能让它控制你的生活，你必须为你的家人和朋友留出时间，或者更坦率地说，为你自己留出时间。生活可远比写几行代码丰富多了。做你自己喜欢的事情，给你的生活带来平衡。</p><h2 id="6-糟糕的办公室政治"><a href="#6-糟糕的办公室政治" class="headerlink" title="6. 糟糕的办公室政治"></a>6. 糟糕的办公室政治</h2><p>这一条是给那些在公司工作的人们的。你和其他人一起工作，但这反过来又会引起冲突、分歧、争论等等。许多开发人员十分傲慢，总认为自己是正确的，即使他们知道自己犯了错，他们中的一些人也永远不会承认。我不是说这是大多数开发人员，但我认为我们至少会遇到一位这样的人。我听很多人说，他们的团队非常棒，成员之间相处得非常融洽，这很好，但不是所有团队都是这样子。</p><ul><li>很多时候你们会在想法和解决方案上发生冲突，试着表现得老练和对对方的尊重，但同时，也不要太容易就被说服，尤其是当你对自己的提案非常有信心的时候。</li><li>不要大喊大叫，不要骂人，千万别做这些事情，这什么用也没有。</li><li>如果他们开始这样对待你，你就离开，做一个更强大的人。</li><li>如果你不幸遇到了一个十足混蛋的团队成员，他完全不听理由，你除了想办法避开他之外，别无他法。</li><li>在某些情况下，你可能不得不和你们的领导交谈，不过我还是建议你先和那个人谈谈。</li></ul><h2 id="7-不能从错误中吸取教训"><a href="#7-不能从错误中吸取教训" class="headerlink" title="7. 不能从错误中吸取教训"></a>7. 不能从错误中吸取教训</h2><p>作为一位开发人员，你会犯很多错误，这不可避免也没什么大不了的。但如果你总是犯同样的错误，不能从中吸取教训，那就有问题了。</p><p>当你犯错后，我建议你遵从这样一个流程：</p><ul><li>找出错误的根本原因是什么；</li><li>找到可以防止错误再次出现的流程；</li><li>弄清楚如果早先发现了错误，能否避免后果。</li></ul><p>当你犯下大错，请你仔细思考一下这三件事，很有可能就不会再犯这个错误了，或者你至少下次会尽早发现错误，避免情况恶化。同时，不要因为犯错而对自己太苛刻，谁都会犯错。</p><h2 id="8-太早放弃"><a href="#8-太早放弃" class="headerlink" title="8. 太早放弃"></a>8. 太早放弃</h2><p>挫折是编程的重要环节。我制作了一些关于挫折及其应对的视频。我也见过很多人因为沮丧而在特定的项目和编程上过早言弃。一些项目确实特别难，似乎一旦你修复了一些bug，它就会导致另一个bug，bug复bug无穷尽也。你可能开始觉得自己处理不了，自己本可以去做别的，做这个就是浪费时间浪费生命浪费金钱……你开始产生很多消极的想法。如果你很快就放弃某个项目，或是很快辞职，那么拟投入到这个项目或工作中的一切都将化为泡影。</p><p>我并不是说你啥项目都不能放弃，只是我看过太多次人们在即将成功的前夜放弃了。所以在放弃之前，确保你试尽了所有可能：已经上下求索、寻求帮助、用遍方法、换个技术、休息很长一段时间让自己的思绪恢复正常、如果可能的话已经搁置了一段时间……你在放弃之前做了所有能做的事情，如果还是失败，那么也许是时候放弃它、继续前进了。成功可能就在眼前，如果你这时候放弃，真的太耻辱了。</p><h2 id="9-做一个无所不知的人"><a href="#9-做一个无所不知的人" class="headerlink" title="9. 做一个无所不知的人"></a>9. 做一个无所不知的人</h2><p>我之前提到过，我认为一些开发人员十分傲慢的原因是，他们认为自己无所不知。他们从不听其他人的意见，他们为啥要听呢？他们知道所有的答案。如果你周围全是这样的人，那真是糟透了，这对你也没好处，因为你也会认为自己无所不知，就会不积极学习、不改善自己。我敢打赌，总有一天你会被自己犯下的错误叫醒，这源于你不听取任何人的意见，也不自己进行调研。</p><p>这些人大多数都是Stack Overflow网站（一个IT技术问答网站）的魔鬼，他们取笑新开发人员的问题，嘲笑他人的回答，一有机会就点击“反对”。我讨厌死这些人了。我认为他们中的许多人在学校里就总是被人找茬，他们利用自己的知识欺负其他可能有问题或是没有所得的开发人员，看上去像是忘掉了被欺负的感受，只想要复仇。我这个理论可能有问题，只是一家之言。</p><p>无论他们出于什么原因这么做，我认为如果他们思想开放、欢迎不同的想法、尊重他人，那他们就会比总是想要“正确”的人快乐多了。他们可能是团队中最聪明的人，也是最糟糕的人，因为没人愿意和他们合作，无法进行良好的沟通。对于一个想要成功的团队来说，沟通和团结是必需的，而无所不知的人会破坏这些。所以，如果你是这样的人，试着别那么自负，开放一点，尊重一点，你会走得更远。</p><h2 id="10-不接受建设性批评"><a href="#10-不接受建设性批评" class="headerlink" title="10. 不接受建设性批评"></a>10. 不接受建设性批评</h2><p>最后一条和上一条有点联系，不能接受建设性批评。无所不知的魔鬼和真心想要帮助你的人之间还是有很大区别的。有时你很难看清这个区别，因为别人指出你的错误或者不完善的地方，你可能感觉不是那么好，感觉自己受到他人的攻击。</p><p>但很多情况下不是这样的，这只是某个人想教给你一个更好地方法，或是分享自己的意见。作为内容生产者，我花了很久才学会分辨挑事者和好心人。一开始，有人谈论我如何做某事的时候，我都很有戒心。但我意识到，他们中的许多人只是在试图提供合理的帮助。如果他们并非不尊重，或者只是对一些无关紧要的事情挑三拣四，那我就需要把它当做对我和对我的知识有益的东西。</p><p>建设性的批评是学习的绝佳资源，因为建设性的批评很有针对性，是你现有的问题，是他人给你的具体解决方案，这是无价的。事实上，代码审查简直太棒了，你可以得到其他人的建议，改进你的代码甚至是你自己。</p><p>所以不要把这类事情都看成人身攻击，除非你真的受到了攻击，或是故意的取笑和不尊重。听进别人的批评或改进建议总是很难，但最终，这会让你成为一个更棒的开发者。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-休息不够&quot;&gt;&lt;a href=&quot;#1-休息不够&quot; class=&quot;headerlink&quot; title=&quot;1. 休息不够&quot;&gt;&lt;/a&gt;1. 休息不够&lt;/h2&gt;&lt;p&gt;我敢肯定你们很多人或者说几乎所有人都对这个坏习惯感到十分罪恶。我也是，对没有休息或休息不够依然有罪恶感。</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>给程序员的建议</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%BB%99%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%BB%99%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BB%BA%E8%AE%AE/</id>
    <published>2021-04-17T15:16:37.000Z</published>
    <updated>2021-04-17T10:11:50.655Z</updated>
    
    <content type="html"><![CDATA[<ol><li>想清楚，写清楚，说清楚，才是真正的清楚！</li><li>多花点时间沟通清楚需求，才能把握正确方向！</li><li>修复需求错误的成本是代码错误的几十倍！</li><li>程序员最大的坏习惯就是：急于动手写代码！</li><li>提高开发效率的捷径：一次做对，不返工！</li><li>写代码之前三件事：<ol><li>弄清楚做什么；</li><li>说清楚怎么做；</li><li>想清楚怎么测！</li></ol></li><li>职业的程序员设计程序，业余的程序员调试程序；</li><li>拷贝粘贴式的作业方式，最容易导入bug，最难调试！</li><li>重复代码是万恶之源！</li><li>小函数，小方法，以功能命名，可以消除注释！</li><li>做一点，测一点，测试驱动的开发，返工最少，返工最易；</li><li>一个方法的复杂度应该小于10，否则很难调试它！</li><li>随时重构代码，不遗留垃圾代码!</li><li>消除静态检查的warning和error！</li><li>职业的程序员是预防BUG，业余程序员是修改BUG；</li><li>经常总结自己的经验教训，写下来！汇总在一起！</li><li>任何复杂的问题都可以简化，两种简化的手段： 按时序拆分，按整体部分拆分；</li><li>每日构建，每日确认，尽早发现错误，尽早返工！</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;想清楚，写清楚，说清楚，才是真正的清楚！&lt;/li&gt;
&lt;li&gt;多花点时间沟通清楚需求，才能把握正确方向！&lt;/li&gt;
&lt;li&gt;修复需求错误的成本是代码错误的几十倍！&lt;/li&gt;
&lt;li&gt;程序员最大的坏习惯就是：急于动手写代码！&lt;/li&gt;
&lt;li&gt;提高开发效率的捷径：一</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>高手养成</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E9%AB%98%E6%89%8B%E5%85%BB%E6%88%90/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E9%AB%98%E6%89%8B%E5%85%BB%E6%88%90/</id>
    <published>2021-04-17T15:16:37.000Z</published>
    <updated>2021-04-17T10:11:55.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、真正危险的是，人们总是高估今天的变化"><a href="#一、真正危险的是，人们总是高估今天的变化" class="headerlink" title="一、真正危险的是，人们总是高估今天的变化"></a>一、真正危险的是，人们总是高估今天的变化</h3><p>  <strong>与其过分追逐变化的外在，不如研究不变的规律与价值</strong><br>  如果不认识到这一点，你永远会像个陀螺一般，每天疲于奔命应付外在的变化，却很少沉下心来反思真正的问题出在哪里，你会被变化迷障了双眼，对未来越来越迷茫。<br>  正如有句话说的那样，人总有一种错觉，对“发生在现在的事”比对“将来会发生的事”更敏感，因此，<strong>人们往往倾向于夸大眼前的困难，或者夸大眼前的成绩。</strong><br>  那些口口声声为明天焦虑的人，他们担心的恰恰不是未来，而是他们高估了眼前的变化，去徒劳地追逐那些稍纵即逝的目标</p><h3 id="二、人生算法的核心：把未来建立在不变的基础上"><a href="#二、人生算法的核心：把未来建立在不变的基础上" class="headerlink" title="二、人生算法的核心：把未来建立在不变的基础上"></a>二、人生算法的核心：把未来建立在不变的基础上</h3><p>  <strong>人生就像滚雪球，重要的是发现很湿的雪和很长的坡</strong></p><p>  所谓职业危机的真相，本质上说来就是一个人永远停留在职业适应阶段，TA根本没有成功跨越适应期的问题，到达更高的层面；如果一个人能在任何领域修炼到了高手区，那么任何危机对这个高手而言只不过是换个玩法，说不定还蕴藏着不错的转机。</p><p><strong>举个简单的例子。</strong></p><p>在会计培训领域有很多名师，例如教会计的张志凤老师，请问他会担心职业危机的到来吗？不会。原因很简单。</p><p>因为他的收入来源由这几项构成：</p><p>1、张志凤老师的本职工作是北京信息科技大学经济管理学院的会计学教授，硕士生导师，这部分收入性质和很多人一样，都是工作带来的收入，属于<strong>劳动收入</strong>；</p><p>2、张志凤在工作期间潜心研究专业领域，发表了一系列的专著论文，在业界享有一定的声望与名气，与网校合作讲课，这是无形资产（个人影响力）给他带来的收入，属于<strong>资产类收入</strong>；</p><p>3、如果张志凤老师退休后创办会计师事务所，成为自负盈亏的企业法人，按照他的专业水平与名气，以及他的人缘及口碑，拓展业务并非难事，那么这部分收入则与市场风险直接关联，属于<strong>风险类收入</strong>，未来业务一旦步入正轨，收益也巨大；</p><p>4、如果张志凤老师退休后不想开事务所，也可以给很多公司做财务顾问，等等。</p><p>如此一来，你会发现张志凤老师永远都有路走，永远都不用担心职业危机。</p><p>  <strong>因此，想要在变化的世界里打造不变的竞争力，对于很多家境普通的“拼一代”而言，成为高手是一条靠谱的逆袭路径，它可以跨越阶层、直至改变自己的命运。</strong></p><h3 id="三、高手和普通人的差距到底在哪里？"><a href="#三、高手和普通人的差距到底在哪里？" class="headerlink" title="三、高手和普通人的差距到底在哪里？"></a>三、高手和普通人的差距到底在哪里？</h3><p><strong>想要成为高手，就需要了解高手与普通人的具体差异所在，才能找到正确的努力路径和方法。</strong></p><p>为了说明这个问题，我们以一名职业棋手的成长为例。</p><p>请问，如果一个人想要成为职业棋手，他要经过哪些训练和努力呢？</p><p>我猜你的回答可能是——<br>1、找一家培训机构，跟着专业的老师学习下棋<br>2、打比赛一路升级<br>3、成为职业棋手</p><p>  还不够，我们还要继续分析：如果这个人跟着老师学习下棋，需要学习哪些内容，又到底要经过哪些阶段呢？</p><p>  <strong>1、花大量的时间研究棋谱。</strong><br>  琢磨整盘棋大体有哪些布局，对手经常出哪些招数，对应的破解招数有哪些？<br>  因此多数时候，一名真正的专业棋手大部分时间恰恰不是和人下棋，而是一个人静静地对着棋盘摆棋谱，不断加深对棋谱的记忆和运用能力。</p><p>  <strong>2、大量重复的练习。</strong><br>  作为一名真正的棋手，主要的练习往往是记定式、打棋谱这种思维模式的训练，同时适时安排对弈，需要经过长时间的练习，才能真正掌握棋谱。</p><p>  <strong>3、及时反馈。</strong><br>  有一名教练至关重要，因为教练的主要作用就是以旁观者身份提供及时反馈，指出你可能无法意识到的盲区，渐渐地将棋谱内化到自己的脑海中，最终形成一个强大的神经网络结构，让你面对任何棋局都能游刃有余，最终成为专业棋手。</p><p>  而下棋里的棋谱，就是最核心的东西，叫做“<strong>模型或套路</strong>”。因此，想要成为真正的高手，最关键的一步就在于熟悉并掌握这个行业或领域的模型或套路。<br>  这种所谓的模型和套路，就像学画画的人一定要从素描学起，必须掌握起码的线条和结构，才能谈及深入学习，于是，这种模型和套路有一个耳熟能详的名字，<strong>基本功</strong>。<br>  这种基本功，无一不是经过了大量的学习和训练，因此，如果你真的想成为一个高手，最关键的一点就是，永远不要贪图捷径，所谓“21天成为专家”根本就是一个噱头——不肯真正下功夫去学去练，神仙也帮不了你！</p><h3 id="四、方法论：高手是怎样炼成的？"><a href="#四、方法论：高手是怎样炼成的？" class="headerlink" title="四、方法论：高手是怎样炼成的？"></a>四、方法论：高手是怎样炼成的？</h3><p> 一个人想要成为某个领域的高手离不开三大要素：</p><ul><li>一是基本功（也称套路和模型）</li><li>二是大量反复的练习</li><li>三是及时搜集反馈、不断反思和改进</li></ul><p>。</p><p>我们回到最开始的那个例子，类似于张志凤老师这样的会计培训专家又是如何炼成的呢？</p><h4 id="1、扎实的基本功"><a href="#1、扎实的基本功" class="headerlink" title="1、扎实的基本功"></a>1、扎实的基本功</h4><p>  譬如，张志凤老师毕业于首都经贸大学，1994年前往美国蒙哥马利奥本留学，1992年起开始从事会计职称考试培训工作，1997年起从事注册会计师考试辅导工作。</p><p>  任何一个领域的牛人，他的知识储备足够多，不仅仅体现在数量上，还体现在思考的质量上——你没想过的他都想过，你开始想的他早就研究过，你打算研究的他已经实践过。</p><p>  经过了学习、实践及思考，他的头脑对这一领域的知识已经<strong>高度系统化和抽象化</strong>，早就内化进了自己的大脑，渐渐地有了自己独特的看法与观点，并逐渐触及到了这个领域的<strong>本源和实质</strong>。</p><h4 id="2、大量重复的训练"><a href="#2、大量重复的训练" class="headerlink" title="2、大量重复的训练"></a>2、大量重复的训练</h4><p>  我所喜欢的一位作家叫余华，写过《许三观卖血记》、《活着》等好作品。他之前是一名牙医，当时牙医工作很辛苦，为了更舒服地生活，他开始到文化馆写小说。</p><p>  余华说：“一开始时，我连标点符号都不会用。根本不知道如何写，所以就先从短篇小说学习，那个过程很艰难。坐在书桌前，我脑子里什么内容都没有，但一直逼着自己往下写。我发现写作会让一个人变得自信，我第一部作品写得很差，但有几句话写得很好。第二部好像开始有故事了，然后再写第三部，就发表了。”</p><p>  用对话推动情节，对人物进行心理描写等都是一名小说作家的基本功，但余华却发现自己不会这些基本的技能，怎么办？为了练习这些技能，他也是很拼的：</p><p>  “看了威廉·福克纳一篇小说，故事是一个穷人把富人杀了，作家用了近一页纸去描写他刚杀完人后，他的女儿如何看他。作家用杀人者的眼睛去看，把杀人者的心态表现得非常到位。 就这样，经过大量反复的磨砺与死磕，余华终于成就了自己的梦想，成为了一名作家。</p><p>  要知道，不会有任何厉害的高手被训练丧失了灵气；但如果缺乏大量反复的训练，一个人很难成为高手。没有大量反复的训练，即便你天资再高也枉然.</p><h4 id="3、搜集反馈，不断反思与总结"><a href="#3、搜集反馈，不断反思与总结" class="headerlink" title="3、搜集反馈，不断反思与总结"></a>3、搜集反馈，不断反思与总结</h4><p>  很多职场人和我抱怨说，自己缺乏师傅或者教练在一旁给予专业的指点，但如果他们得知<strong>教练的主要作用是以旁观者身份提供及时反馈</strong>的话，那么在职场环境中，这个功能离开教练也同样可以由他人完成，例如你的同事、你的客户、你的领导等等。</p><p>  职场是人和人构成的江湖，在这个江湖里，你心里能装下多少人又能影响多少人，直接决定了你的江湖地位和威望。</p><p>  毫无疑问，一个心中时时有他人遇事愿意为他人着想的人，自然就不太容易受到情绪的困扰，因为遇到任何问题即便是不好的反馈，这些人的思考方向永远都是：如何做才能让对方感觉更便利更好呢？如此，这个人更能够集中精力和注意力放在服务他人方面，随着服务质量的提高，自己的口碑自然就提高了。</p><p>  从这个角度来说，如果领导批评了你，如果同事指出了你的不足，倘若你意识到自己真的存在不足，感激都还来不及，又有什么可委屈的呢？想想看，我们不正是通过这种反馈才能看见自己看不到的盲区，然后才能谈及改进和成长的吗？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、真正危险的是，人们总是高估今天的变化&quot;&gt;&lt;a href=&quot;#一、真正危险的是，人们总是高估今天的变化&quot; class=&quot;headerlink&quot; title=&quot;一、真正危险的是，人们总是高估今天的变化&quot;&gt;&lt;/a&gt;一、真正危险的是，人们总是高估今天的变化&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把书中的知识转化成能力</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/10/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/10/</id>
    <published>2021-04-17T14:18:37.000Z</published>
    <updated>2021-04-17T10:11:23.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="纸上得来终觉浅，绝知此事要躬行"><a href="#纸上得来终觉浅，绝知此事要躬行" class="headerlink" title="==纸上得来终觉浅，绝知此事要躬行=="></a>==<strong>纸上得来终觉浅，绝知此事要躬行</strong>==</h3><p>在《<strong>实用性阅读指南：把读到的知识转化成能力</strong>》这本书中，大岩俊之介绍了自己如何做笔记，如何牢记书中的内容，以及如何将书中的内容付诸行动。</p><p>成年人的阅读本身就带着一定的目的居多，我们读一本书不仅要花费金钱，还要占用大量的时间，如果不能把书中的知识变成自己的能力，就是一种巨大的浪费。</p><h2 id="▶-如何做读书笔记"><a href="#▶-如何做读书笔记" class="headerlink" title="▶ 如何做读书笔记"></a>▶ 如何做读书笔记</h2><p>关于读书笔记，我长期以来使用的就是奥野宣之在《<strong>如何有效阅读一本书</strong>》中介绍的“葱鲔火锅式”读书笔记，即<strong>摘抄+感想</strong>的方式，可以立马捕捉到当下一闪而过的灵感，这种独一无二的笔记对于写书评提供了非常好的帮助。</p><p>除此之外就是思维导图，思维导图自20世纪60年代诞生以来，超过2亿次书面引用，逾10亿人通过电视观看过，被人们当作“终极思维工具”。就连比尔·盖茨、艾伯特·戈尔这样的人物都在使用。</p><h4 id="1-读书思维导图"><a href="#1-读书思维导图" class="headerlink" title="1.读书思维导图"></a>1.读书思维导图</h4><p>主要包含：书籍的信息、读书的目的、得到的答案、整体的总结四个方面的内容，以下就是我按照作者的方法制作的读书思维导图。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/10/image-20210417180911247.png" class="" title="image-20210417180911247"><h4 id="2-一本书的思维导图"><a href="#2-一本书的思维导图" class="headerlink" title="2.一本书的思维导图"></a>2.一本书的思维导图</h4><p>一本书的思维导图是基于详细阅读后，对于整本书的主要脉络和逻辑制作的思维导图，可以按照每个章节，每个标题、小标题、粗体字来绘制，这样便于你立马搜索到书中的重要知识点。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/10/image-20210417180927507.png" class="" title="image-20210417180927507">▶ <h2 id="如何记住书中的重要内容"><a href="#如何记住书中的重要内容" class="headerlink" title="如何记住书中的重要内容"></a>如何记住书中的重要内容</h2><p>哪怕你是一个记忆力特别差的人，只要反复多面对几次就好了。我们读书也一样，之所以记不住书中的内容，那是因为你没有反复阅读，人的大脑有1000亿个神经细胞，为了不让自己达到极限，它会自动删除一些记忆。通过<strong>艾宾浩斯记忆曲线</strong>可以清楚看到大脑是多么的不靠谱。</p><p>《实用性阅读指南》建议大家可以尝试以下8种方法来解决记忆的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.反复阅读；</span><br><span class="line"></span><br><span class="line">2.利用二八法则，找出书中最重要的20%的内容；</span><br><span class="line"></span><br><span class="line">3.利用感情记忆；</span><br><span class="line"></span><br><span class="line">4.利用输出记忆；</span><br><span class="line"></span><br><span class="line">5.故事记忆</span><br><span class="line"></span><br><span class="line">6.使用首字记忆</span><br><span class="line"></span><br><span class="line">7.联系记忆</span><br><span class="line"></span><br><span class="line">8便利贴记忆</span><br></pre></td></tr></table></figure><h2 id="▶-如何将书中的内容付诸行动"><a href="#▶-如何将书中的内容付诸行动" class="headerlink" title="▶ 如何将书中的内容付诸行动"></a>▶ 如何将书中的内容付诸行动</h2><p>阅读的目的无外乎三种：消遣，获得知识，收集信息。尤其是致用类图书，学完之后一定要拿去用，不然读再多的书都没用。</p><p>为了创业，你可能买很多关于领导力、创业、运营方面的书籍来学习，书中的内容并不一定是知识，那么什么才是知识呢？成甲在《好好学习》这本书中是这么说的：“==在我的定义里，只有能够改变你行动的信息才是知识==。”</p><p>不管你是在杂志上、报纸上、书中、文章中所看到的一切内容其实都是信息，信息变成知识的前提就是了解他的人能否使用这些信息改变自己的行为，产生新的结果。</p><h3 id="1-设置行动目标"><a href="#1-设置行动目标" class="headerlink" title="1.设置行动目标"></a>1.设置行动目标</h3><p>2018年的第一个月，我的阅读计划里面，80%的书籍都是关于阅读的书，因为我想通过一次主题阅读解决自己阅读方面的问题，如阅读效率和阅读速度。</p><p>带着目的读书，是有效阅读的前提，但是阅读完之后我们还需要给自己设置行动目标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">读完《快速阅读》后，我的行动目标是：经过一年的训练，可以达到每分钟1000字；</span><br><span class="line"></span><br><span class="line">读完《如何有效阅读一本书：超级实用笔记读书法》后，我的行动目标是：利用“葱鲔火锅式”读书笔记来写文章；</span><br><span class="line"></span><br><span class="line">读完《高效能阅读》后，我的行动目标是：2018年阅读300本以上的书。</span><br></pre></td></tr></table></figure><p>当你写下行动目标的那一刻，其实就清楚了自己接下来该干什么，“一个人只要心中有目标，他的面前就会有路。心有多远，路有多长。”</p><h3 id="2-想象自己成功时的样子"><a href="#2-想象自己成功时的样子" class="headerlink" title="2.想象自己成功时的样子"></a>2.想象自己成功时的样子</h3><p>想象的越具体生动越有助于早日实现目标，就像很多公司为了激励大家好好工作，会奖励豪华几日游一样，想象着自己拿着红酒，站在巨大的落地窗前，面朝大海，春暖花开，好生惬意，于是，工作劲头十足。</p><h3 id="3-明确现实与目标的距离"><a href="#3-明确现实与目标的距离" class="headerlink" title="3.明确现实与目标的距离"></a>3.明确现实与目标的距离</h3><p>vox新闻网的作者茱莉娅·贝卢兹想搞清楚什么才是减肥的最有效办法，为了确保研究的公正性与权威性，她挑选了顶级的研究员和思想家进行调查，结果却让人十分意外。</p><p>最有效的减肥方法不是节食、不是每天锻炼几个小时，也不是去减肥中心，而是那些“善于跟踪监控——监控自己吃了多少、体重多重的人”。减肥人员定期检查自己的体重，关注自己的饮食，写食物日记更容易实现减肥的目标。</p><p>渥太华大学的尤尼·弗利多弗告诉贝卢兹：“食物日记虽然枯燥无趣，但是在开始减肥之前，人们需要知道他们的现状以及需要做出哪些改变。”</p><p>很多人的目标之所以很难实现，就是因为不清楚现实与目标的差距。要么目标遥遥不可及，要么太小不够有驱动力。</p><p>《实用性阅读指南》建议大家按照百分比的方式来思考现状与目标的距离，如果实现目标是100%,自己目前的现状是50%的话，为了拿出更加确切的执行步骤，你可以使用5W1H的提问方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">怎么做？</span><br><span class="line"></span><br><span class="line">和谁做？</span><br><span class="line"></span><br><span class="line">在哪里做？</span><br><span class="line"></span><br><span class="line">何时做完？</span><br></pre></td></tr></table></figure><h3 id="4-将行动细分"><a href="#4-将行动细分" class="headerlink" title="4.将行动细分"></a>4.将行动细分</h3><p>在重庆有一个很美丽的爱情故事，上世纪50年代，20岁的年轻小伙刘国江爱上了大他10岁的俏寡妇徐朝清。为了躲避世人的流言蜚语，他们携手私奔至深山老林。为让徐朝清出行安全，刘国江几十年如一日，凿出了石梯6000多级，被称为“爱情天梯”。</p><p>2011年的时候，我还亲自去爬了“爱情天梯”，当时徐朝清老人还在世，山路崎岖，有些地段十分陡峭，这个故事之所以感动很多人，就是因为刘国江在没有任何机械设备的辅助下一个台阶一个台阶凿出来的。</p><p>每一个台阶就是一个最小行动单位，我们做任何事情都需要把行动按照时间、数量、行为来设定，而且越具体越好。</p><h3 id="5-付诸行动"><a href="#5-付诸行动" class="headerlink" title="5.付诸行动"></a>5.付诸行动</h3><p>最后一步就是行动，也是最难的一步，正所谓“想”和“做”是世界上遥远的距离。</p><p>我朋友圈有一个微商达人，别人做微商都是在朋友圈刷屏卖货，他却不是，从2014年开始，他就坚持在喜马拉雅上分享自己的微商经验，朋友圈经营的也很有内涵，从来不刷屏。</p><p>如今他不仅出了三本关于微商的书，还跟湖南卫视达成了合作，很早就开上了特拉斯。我问他成功的秘诀是什么，他说：“简单的事情重复做。很多人之所以坚持不下去，就是因为没有看到持续行动带来的好处。”</p><p>就拿我自己来说，把手帐坚持了一年，就收获到了很多我想都不敢想的事情。</p><p>不知道从什么时候开始，很多人都在反对功利性阅读，书籍最原始的功能就是传承知识、记录信息啊。读书改变命运，尤其是在知识经济时代，这句话的意义更加不同，我们拼的不是一年读多少本书，而是你内化知识的能力，可以通过知识变现，会用才叫做知识，不然只能称之为信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;纸上得来终觉浅，绝知此事要躬行&quot;&gt;&lt;a href=&quot;#纸上得来终觉浅，绝知此事要躬行&quot; class=&quot;headerlink&quot; title=&quot;==纸上得来终觉浅，绝知此事要躬行==&quot;&gt;&lt;/a&gt;==&lt;strong&gt;纸上得来终觉浅，绝知此事要躬行&lt;/strong&gt;==&lt;</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>干法</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/11/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/11/</id>
    <published>2021-04-17T14:18:37.000Z</published>
    <updated>2021-04-17T10:11:20.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="基本信息-BASICS"><a href="#基本信息-BASICS" class="headerlink" title="基本信息 BASICS"></a>基本信息 BASICS</h3><ol><li>书名：干法</li><li>作者：稻盛和夫</li><li>阅读进度：100%</li></ol><h3 id="阅读心得-LEARNINGS"><a href="#阅读心得-LEARNINGS" class="headerlink" title="阅读心得 LEARNINGS"></a>阅读心得 LEARNINGS</h3><ol><li> 热爱工作，转变心态</li><li>  人生是由苦难构成的，工作能够克服人生的磨难，让命运获得转机</li><li>工作的目的是为了提升自己的心智并获得部分劳动价值</li><li>好逸恶劳，追求安乐是人的本性</li><li>用努力获得回报，才能真正感受人生的快乐和时间的珍贵</li><li>每日反省</li><li>天职不是偶然碰上的，而是自己亲自制造出来的</li><li>从工作中寻找快乐</li><li>像水库一样经营</li><li>注重细节，德国格言：神寄宿在细节处</li><li>相信自己，深度思考如何提高自己解决问题的能力</li><li>得意时不忘形，失意时不消沉</li><li>对失败的原因进行分析，诚恳反省</li></ol><h3 id="重点摘录-NOTES"><a href="#重点摘录-NOTES" class="headerlink" title="重点摘录 NOTES"></a>重点摘录 NOTES</h3><ol><li> 如果你热爱自己的工作，你就会全身心投入。如果你全身心投入，就会产生良好的工作结果，你这种工作态度和工作结果不但能获得周围人的肯定，而且会让你从内心感到满足并产生自信。而这又会成为动力，激励你更努力地投入工作……这样的良性循环，不仅是成功的必要条件，从某种意义上讲，它甚至就是成功的充分条件。因为这种良性循环可以改变你的命运。</li><li> 对今天做过的事，老老实实地进行反省，发誓从明天起认真改进。</li><li> 不去想，不认真思考，就什么都实现不了</li><li>以乐观的态度面对困难和逆境</li><li>只要永不言弃，事态一定会出现转机</li><li>成败取决于最后1%的努力</li><li>无论多么渺小的工作，都积极去做，抱着问题意识，对现状动脑筋进行改良</li><li>人生·工作的结果=思维方式 X 热情 X 能力</li><li>正面的思维方式：积极向上、具有建设性；善于与人共事，有协调性；性格开朗，对事物持肯定态度；充满善意；能同情他人、宽厚待人；诚实、正直；谦虚谨慎；勤奋努力；不自私，无贪欲；有感恩心，懂得知足；能克制自己的欲望。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;基本信息-BASICS&quot;&gt;&lt;a href=&quot;#基本信息-BASICS&quot; class=&quot;headerlink&quot; title=&quot;基本信息 BASICS</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%B2%BE%E8%BF%9B%EF%BC%9A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/%E7%B2%BE%E8%BF%9B%EF%BC%9A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA/</id>
    <published>2021-04-17T09:50:15.621Z</published>
    <updated>2021-04-17T09:50:15.621Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>亚马逊和Uber都有增长飞轮，CEO要靠飞轮来做决策</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/02/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/02/</id>
    <published>2021-04-17T09:34:37.000Z</published>
    <updated>2021-04-17T10:01:27.060Z</updated>
    
    <content type="html"><![CDATA[<p>线性增长和线性预测已经不能适应这个充满不确定性的世界，如何构建增长飞轮，已经是许多初创企业和大型公司思考的问题。</p><p>　　著名管理学家吉姆·柯林斯在其2001年出版的《从优秀到卓越》一书中，首次提出了飞轮这一概念；而贝佐斯所描绘的亚马逊的飞轮模型更是广为人知。今年2月，柯林斯在其新著《转动飞轮》（Turning the Flywheel）一书中，则希望能够更深入地讨论公司如何“转动飞轮”，特别是，构建战略飞轮。</p><p>　　一家企业的失败，往往是从战略开始。等到市场下滑、消费者抱怨声声，那已经是战略失败的结果。那么，如何利用人工智能等新一代计算技术，让CEO们能够进行更高效、更具弹性、更高质量的战略决策？</p><p>　　游戏、人工智能和深度学习的兴起，为21世纪富有活力和弹性的商业模式奠定了基础。</p><p>　　一家大型汽车制造公司向一家咨询公司提出，希望评估比较本公司与共享出行服务商在制造自动驾驶汽车方面的优劣势。这家咨询公司提供了一个以人工智能为核心的游戏系统，模拟这家汽车公司和竞争对手的竞争过程及可能的结果。</p><p>　　人工智能系统为用户（包括个人、企业和其他做决定的主体）模拟了大量的选择及其发展过程，能让用户看到自己的选择可能导致的结果。用户对这些战略决策的选择和需求又反过来促进了人工智能系统的进化和学习。这就创造了一个飞轮。</p><p>　　CEO们如今不再像以前一样，只依靠自己的直觉或假设来决策，而是可以利用策略飞轮的力量，先模拟出结果再做出决定。</p><p>　　战略是企业创造竞争优势的一种方式。一般来说，战略家们会对市场的未来需求做出完美的预测，帮助企业选择正确的方向，投入相应的资源，坚定不移地执行战略。</p><p>　　但当今世界充满不确定性，市场和消费者需求、商业竞争态势、技术迭代进程、供应商合作情况以及政策法规都处于不断变化中。确定性的、年度的、线性的战略规划过程不再适用，更具弹性的战略规划过程受到推崇。企业可以通过使用更加动态的方法，如利用人工智能和更先进的分析技术来完成这种转变。</p><p>　　竞争优势可能稍纵即逝。随着行业的兴衰，在上一个商业周期中获得成功的参与者们可能需要更经常、更具动态性地重新考虑自己的差异化能力、投资组合，甚至WTP（Way to Play，玩法）。</p><p>　　福特不再仅仅是一家汽车制造商，而是一家涉足多个交通领域的大型企业；大型石油公司正在投资可再生能源，以找到面对限制排放挑战的应对之策；而亚马逊则渗透进了我们生活的每个方面。</p><p>　　成功的颠覆者能够创建强化反馈循环，从而利用市场趋势，让自己长期处于不败之地。一家企业拥有的数据越多，其客户体验的个性化程度就越高；客户的个性化体验越好，吸引的客户就越多；客户越多，获得的数据就越多。这种飞轮效应导致绝大部分的消费者涌向了少数几家企业，从而造成市场垄断。</p><p>　　举两个非常简单的例子：</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/02/9841-hzrevqa4531889.jpg" class="" title="img"><p>　　在亚马逊成为在线零售业的霸主之前，杰夫·贝佐斯在餐巾上画了左边这张图：更广泛的产品选择为顾客提供更好的购物体验，顾客数量增加吸引了更多的卖家和更多的流量，因此降低了成本，从而能为顾客提供更低的价格。正是这个良性循环帮助亚马逊获得成功。</p><p>　　另一张图则描述了Uber的战略，显示了其与亚马逊类似的动态过程：更快的接单过程刺激了更多的需求，因此吸引了更多的司机，然后就能扩大服务覆盖的区域，减少司机的等待时间，也因此能向顾客提供更低的价格。</p><p>　　构成这个飞轮系统的要素包括：通过因果效应促进飞轮系统中某几个要素的优化，然后就能增加大量的用户。</p><p>　　<strong>获得持久成功的秘诀涉及三个关键步骤：</strong></p><p>　　首先，通过不断感知市场变化来适应市场需求，并使用明确的心理模型对新的想法或决策进行试验，以观察所做决策的传播情况、范围和可能的结果。</p><p>　　第二，在颠覆性的市场趋势出现时，开发不断强化的、能让自己占据优势地位的因果反馈循环，对这个因果框架进行多次测试。</p><p>　　第三，通过因果循环系统反馈的需求对自己的商业模式进行扩展和完善。</p><p>　　亚马逊用高速的决策塑造了市场，创建了自己的飞轮商业模式，从而建立了弹性战略。亚马逊对技术和物流的高度关注有助于降低成本，这使得平台能够大幅增加产品种类。丰富的商品又使亚马逊成为顾客首选的在线购物平台。亚马逊还利用更深层次的功能与消费者一起创造出飞轮效果。它通过引入诸如一键订购和加入亚马逊会员免配送费等功能，来了解消费者偏好，塑造消费者的购买习惯，也让购物变得更加容易。</p><p>　　随着时间的推移，亚马逊还扩展了与零售无关的业务，Echo智能音箱的语音助手Alexa现在已经成为了物联网的技术支柱，实现了无数设备的互相连接。因为消费者能用Alexa操作更多的设备，Alexa的集成性和便利性随之增强，销售额不断增加，于是吸引更多的供应商与Alexa合作。</p><p>　　在积极建造增长型飞轮的同时，公司同样可以利用战略飞轮的力量。事实上，导致颠覆和加速时钟速度的力量也为企业提供了制定弹性战略的工具。这种力量就是以人工智能为代表的新一代计算机技术。自动化、各类分析和人工智能近年来取得了巨大的进步。人工智能无法为我们制定战略，但它可以改变我们制定战略的方式，帮助组织重新构想未来并开发自己的飞轮系统。通过游戏的角度来观察战略，可以为构建动态战略计划提供新方法，增加战略制定过程中的远见和弹性。</p><p>如下图所示，动态和弹性的飞轮策略有三个组成部分。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/02/b538-hzrevqa4532111.jpg" class="" title="img"><p><strong>１、感知市场</strong></p><p>　　企业必须持续感知外部市场变化，包括竞争前景、市场的驱动因素、技术的进步、监管或政策的变化以及其他市场变化和行业的颠覆，这些会帮助公司识别出目前最紧迫的战略问题，有利于CEO们及时解决问题。</p><p><strong>２、制定战略和规划投资</strong></p><p>　　设计和构建战略游戏。应明确地阐述有哪些战略问题、参与者、可以采取的行动、环境不确定性以及获胜的必要条件，这些都是战略游戏化的一些关键要素。游戏的第一个组成部分是政策（包括决策和行动），要明确公司可用的选择以及竞争对手可用的选择，包括提价或者降价、促销支出、增加或减少研发等。</p><p>　　模拟战略游戏。建立战略问题的动态模拟、迭代模拟和检查各种可能的情景，并逐步完善模拟模型，以捕捉所有关键决策点和不确定性。将市场变量联系起来，预测有关行业发展的情景以及公司在这种情况下应该如何生存，了解未来的风险和成果。</p><p>　　评估战略游戏。模拟过程中会生成数以万计的结果。用机器学习算法来分析模拟场景数据以确定采用不同的举措。在前途尚不明朗的情况下，对多个不同业绩的项目进行组合投资有助于平衡系统对未来的评估和弹性。</p><p><strong>３、评估性能和学习</strong></p><p>　　这是飞轮模型的第三个重要组成部分。在感知市场和试验策略后，公司必须评估之前的成果，并且从中学习，然后提高感知市场和实验的能力，从而不断得出新的想法。</p><p>该系统会预测将来可能发生的事情，同时观察正在发生的事情，从而进行动态调整或从中学习以提高其性能。</p><p>　　领导者可能希望首先使用这种新方法做一些小的决策，然后根据公司的文化和流程对其进行测试。贝佐斯一针见血地指出，那些敢于尝试、愿意承担小风险的企业一定能在某次尝试后获得成功。相反，那些不愿意冒险的企业则可能在一次失败后就让整个企业陷入万劫不复的境地。</p><p>　　战略和战略规划已经不再是上级对下级发号施令、下级只要照做就行了。在这个商业更迭迅速，处处充满不确定性的当下，每一天都需要做出高效率、高质量的决策。所以，利用数字化的先进技术，提高进化力、提高敏捷反应力并善于弹性调整，变得尤为重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;线性增长和线性预测已经不能适应这个充满不确定性的世界，如何构建增长飞轮，已经是许多初创企业和大型公司思考的问题。&lt;/p&gt;
&lt;p&gt;　　著名管理学家吉姆·柯林斯在其2001年出版的《从优秀到卓越》一书中，首次提出了飞轮这一概念；而贝佐斯所描绘的亚马逊的飞轮模型更是广为人知。今年</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>学习方法论</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/04/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/04/</id>
    <published>2021-04-17T09:31:37.000Z</published>
    <updated>2021-04-17T10:02:26.582Z</updated>
    
    <content type="html"><![CDATA[<p>学习，应该是分情况而言的，没有放之四海皆准的学习法则，不同的情况所用的方法也不同。我根据学习目的的不同，将学习分为三种情况。<br>一，应试学习。<br>二，技能学习。<br>三，方法论学习。</p><p>三种情况的认知学原理是相通的，所以首先我们要明白在最基础的层面，我们的大脑是如何吸收新知识的。</p><h2 id="认知学原理"><a href="#认知学原理" class="headerlink" title="认知学原理"></a>认知学原理</h2><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/04/image-20210417174737093.png" class="" title="image-20210417174737093"><p>上图左边是周边环境，有很多可看可听的事情、待解决的问题等，右边是科学家们称为<strong>工作记忆</strong>的大脑组成，它保存你正在思考的事情。工作记忆是大脑中让你意识到周围有什么的地方，比如看见一缕光落在布满灰尘的桌子上。</p><p><strong>长期记忆是一个储存你关于世界的事实性知识的巨大仓库</strong>:瓢虫身上有圆点，你最喜欢的冰淇淋口味等。事实性知识可以是抽象的，比如三角形是有三条边的封闭图形，或者你对狗的总体认知。长期记忆中的所有信息在于意识之外，在使用之前它都静静地待在那里，进人工作记忆时它才浮现到意识中。如果我问你北极熊是什么颜色，你几乎会脱口说出白色。白色这个信息刚才进人你的工作记忆。<strong>长期记忆中还包含了过程性知识，这是你对执行任务所必需的大脑过程的知识。</strong></p><p><strong>思考在你将周边环境和长期记忆中的信息用新的方法组合时发生</strong>，这一组合过程在工作记忆中发生。有些问题看上去很棘手，比如微积分方程，其原因在于我们的工作记忆中没有足够的空间来储存问题的所有信息。工作记忆的空间有限， 所以工作记忆空间一旦拥挤，思考就变得异常困难。</p><p>所谓学会了某种知识，就是这种知识成功存入了你的长期记忆中，并且在用的时候，可以马上调出浮现在工作记忆中。那么学习就简化为两个问题，<strong>一是如何将知识存入长期记忆中</strong>。<strong>二是如何成功调用，既所谓的“知识迁移</strong>”。</p><p>关于第一个问题，你的记忆系统是这样估量的：如果你仔细地思考过一件事情，你就有可能再度想起它，所以它应该被存储。因此你的记忆不是你想要记住或你尝试记住的事情，而是你所思考的事情。<strong>记忆是思考的残留物，所以要记住一个东西，就要思考这个东西的意义。</strong></p><p>第二个问题的关键在于给工作记忆扩容。工作记忆的空间是有限的，要想成功的运用复杂的知识，我们就需要让长期记忆中的知识打包合并，因为工作记忆空间的大小是由有意义的片段决定的，单个片段的信息量越大，我们对这个知识运用的越好。工作记忆扩容方法有两个。<strong>一是将新知识与已有知识做类比，寻找相同的深层结构，从而更好的理解和思考。第二个方法是你可以让工作记忆中操纵信息的过程更有效率</strong>。这种过程性知识也是存储在长期记忆中的，过程越有效率，在工作记忆中所占空间越小。下面我们对三种学习情况分别进行说明。</p><h2 id="应试学习"><a href="#应试学习" class="headerlink" title="应试学习"></a>应试学习</h2><p>应试学习即为了考试而进行的学习，有两种情况，一种是从小学到大学的课堂式学习，另一种是类似考研或考证的自学备考型学习。先说课堂学习，分四块内容，预习–听课–自习–复习。</p><p>预习是非常重要的，它为高效听课打下基础。预习的目的是给即将学习的知识在大脑中建立一定的背景知识，这样在听课时，这些知识在工作记忆中所占的空间就会减小，从而让我们有更多的思考空间。预习另一个好处是变被动学习为主动学习。预习过程中要找到自己的困惑点和难点，记录下来，在课堂中解决。这本身就是一个思考的过程，可以让知识记得更牢。</p><p>听课的第一要义是专注，要把自己的眼睛和大脑交给老师。有了专注的态度接下来做两件事。一是要不停的思考，思考老师讲的和你自己预习时理解的有没有差别。考虑老师所讲的概念，作用，合理性，是否存在矛盾，潜在应用，现实生活中的映射等。不明白的地方简要记下来。这是一个加深理解和记忆的过程，<strong>记住，记忆是思考的残留物</strong>。二是做笔记。做笔记推荐<strong>康奈尔笔记法</strong>，简单易学，并且符合认知学原理。淘宝康奈尔笔记本一搜一大把，15到20多的样子。</p><p>说完记笔记的方法，我们来看看我们应该在笔记本上记些什么？老师的补充讲解内容、老师自己独创的东西、上课讲的非常经典的例题和模型、老师反复强调的点以及<strong>自己灵光乍现的感悟</strong>等等。</p><p>什么内容完全没必要记进笔记？概念性的东西、课本上有的东西、已经烂熟于心的内容没必要记，但是还是要简单标注这些内容的页码，这样课后总结才容易找出知识脉络。</p><p>自习。做某一科作业时，先回顾这一科的课堂笔记，总结要点写在笔记本左侧的1号区域。这也是一个思考的过程，让知识进一步加深印象，并且通过思考将信息压缩。然后开始做作业，做作业的过程既是重新思考知识点如何运用的过程，也是需要你筛选好题和有疑问的题的过程，应该用不同符号标出，比如有疑问的题前边用？标记，觉得好的题目前边用*标出。</p><p>要着重总结知识点在题目中的运用方式，通过例题找出这个知识点运用的“套路”，这是一个寻找深层结构的过程。</p><p>一旦我们找到了深层结构，我们就真正掌握了这个知识点，剩下的就是要经常复习，让这个深层结构的调用路径也变成一整块有意义的片段存储在我们的长期记忆中。通过这样的总结和思考，我们便能举一反三。然后，要定期复习，每一科安排固定时间进行复习，复习时着重复习标记的题目和笔记内容，有新的想法随时添加到笔记中。</p><p>最后，等所有的课程都学完的时候，要总结和归纳所学知识，构建自己的知识框架，建议采用思维导图的方法，这样的总结可以让你对知识有个整体把握。学习的目的就是用尽可能少的例子找到问题和答案之间最普遍的规律。所以思维导图也要侧重总结普遍规律。具体步骤如下图：</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/04/image-20210417174856729.png" class="" title="image-20210417174856729"><h2 id="技能学习"><a href="#技能学习" class="headerlink" title="技能学习"></a>技能学习</h2><p>技能知识是指某种流程或某种技巧，通过不断的练习后指导我们解决现实中的某种问题的知识。包括各种软件学习，各种体育项目学习，摄影绘画等技巧的学习等等。这类知识的特点就是实操性极强，目的性极强。技能知识都是熟能生巧的知识，光说不练等于没学，实操才是硬道理。技能学习推荐采用<strong>刻意练习</strong>的方法。</p><h4 id="找个好老师"><a href="#找个好老师" class="headerlink" title="找个好老师"></a>找个好老师</h4><p>优秀的教练知道学习一件事情的最佳次序，他会给你演示正确的行为、提供有效的反馈，并且避免你“走弯路”。</p><p>如果没有条件参加课程或者找教练怎么办？其实我们已经拥有了一位万能的“教练”：互联网。你可以通过网络，找到：1.丰富的学习资料、工具（书籍、视频、录音、软件等）。2.特定领域的学习社群（qq群、微信群、论坛、线下沙龙等）相比真人的教练面对面教你，通过互联网自主学习效果会有所削减，但是维度更加丰富，你仍然可以从别人总结的“学习攻略”中快速的进步。</p><p>接下来是很关键的一步：设计你的刻意练习方法。</p><p>如果你没有导师教，就一定要结合网络找到的资料，设计属于自己的训练方案。</p><h4 id="有精确定义的目标和计划"><a href="#有精确定义的目标和计划" class="headerlink" title="有精确定义的目标和计划"></a>有精确定义的目标和计划</h4><p>关键在于要有目的的练习。学习这类知识首先要给自己定位，你要学到什么程度，比如学羽毛球，你是要到职业水平，还是业余顶尖水平，还是在你的同事们中间处于一个中上等水平。定了大目标后，要分解成若干小目标，小目标要足够具体，还是说羽毛球，如果你的大目标是专业或业余顶尖水平，那么你在制定计划时就不能只是从羽毛球的技术入手，还需要从自身体能，战略战术等层面共同拓展，而且最好是找一个专业的教练，循序渐进。如果你只想日常锻炼，处于同事中上等，则相对容易，但要进步，还是需要制定一个计划，比如这场球我要学习放短球，那你可以打之前看看放短球的视频，在比赛时尽量运用。</p><h4 id="要获得及时有效的反馈"><a href="#要获得及时有效的反馈" class="headerlink" title="要获得及时有效的反馈"></a>要获得及时有效的反馈</h4><p>练习最大的意义是要获得如何改进的反馈。有效反馈包含两方面：<strong>及时和客观</strong>。</p><p>你必须及时的知道你的练习对还是不对，如果不对，错在哪里。没有有效的反馈，你会因为错误的练习方式而产生相反的结果。这也是为什么请人教是最佳的学习方式，教练能够给你最有效的反馈：你练对了，他告诉你继续保持，你练错了，他马上就给你指正。</p><p>如果你想学某样技能，经济允许，就去找导师学，至少尽可能在“初学阶段”，花钱参加某种正式的培训，让专业导师带你先“正确的入门”。</p><p>如果没有条件花钱上课学，就给自己每次的练习做记录、录视频、录音，以观众视角看自己的练习过程，再对照正确的范例纠正自己，同样能获得有效的反馈。</p><p>不断获得反馈，才是严肃有效的刻意练习。</p><h4 id="坚持不懈的刻意练习"><a href="#坚持不懈的刻意练习" class="headerlink" title="坚持不懈的刻意练习"></a>坚持不懈的刻意练习</h4><p>接下来就是要不断的刻意练习，完成自己的学习目标，不断学习新技巧，巩固已学会的技巧。这个过程也是一个不断思考的过程，这些技能将慢慢储存到我们的长期记忆中，并且随着熟练程度的提高，这些知识会集成为信息密度越来越高的片段，在工作记忆中所占用的空间越来越小，最终成为“自动驾驶”的知识。</p><h2 id="理论性学习"><a href="#理论性学习" class="headerlink" title="理论性学习"></a>理论性学习</h2><p>这块儿知识指的是那些我们感兴趣，但是不用来考试或应用，或应用的很少的理论性知识。比如历史知识，天文知识，植物学知识等等。这些知识因为平常不怎么用，很容易学了就忘，推荐采用费曼学习法。</p><p>费曼学习法说起来很简单，只有两步，<strong>学习和解释</strong>。学习方法可以用我们上文描述的思维导图法，而解释的关键在于验证二字。<strong>学习是用有限的例子归纳某一知识的规律从而解决有关这个知识的新问题，解释的过程就是验证你是否学会的过程</strong>，如果不能言简意赅的说清楚某个知识点，说明信息在我们脑中压缩的还不够。说明我们对该知识的掌握还不够，还需要再进行归纳总结。</p><p>思维导图是以过程为主导的学习方法，注重知识的拆分，而费曼技巧是以目的为主导的学习方法，核心在于验证和使用知识。我们可以把我们学到的知识与好友进行讨论，或者也可以给自己复述。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习，应该是分情况而言的，没有放之四海皆准的学习法则，不同的情况所用的方法也不同。我根据学习目的的不同，将学习分为三种情况。&lt;br&gt;一，应试学习。&lt;br&gt;二，技能学习。&lt;br&gt;三，方法论学习。&lt;/p&gt;
&lt;p&gt;三种情况的认知学原理是相通的，所以首先我们要明白在最基础的层面，我</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/21%E4%B8%96%E7%BA%AA%E8%B5%84%E6%9C%AC%E8%AE%BA/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/21%E4%B8%96%E7%BA%AA%E8%B5%84%E6%9C%AC%E8%AE%BA/</id>
    <published>2021-04-17T09:30:38.937Z</published>
    <updated>2021-04-17T10:11:26.687Z</updated>
    
    <content type="html"><![CDATA[<p><strong>李嘉图：稀缺性原则</strong></p><p><strong>马克思：无限积累原则</strong></p><ol><li> 私人资本的积累和分配过程本身就具有使财富集中且往往过度集中的强大推动力</li><li>从长期来看，资本收益率（特别是顶级资本的收益率）明显超过经济增长率。两者之差导致初始资本之间的差距一直延续下去（资本持有者只需将资本收入的一小部分用于保持自己的生活水平，而将大部分用于再投资），并且可能造成资本的高度集中</li><li> 中国原则上可以凭借强有力的中央统一领导体制和高层领导者的反腐和促进公益的决心贯彻累进税制，免于游说集团的压力和竞选政治献金带来的束缚。</li><li>财富分配包含两个维度，一是“要素”分配，这里劳动力和资本被当作是“生产要素”，他们被抽象成两个均匀的实体；二是“个体”分配，这会考虑到个体层面上的劳动收入和资本收入的不平等。现实中这两个维度都非常重要。如果不同时分析这两个维度，是不可能完全理解分配问题的。</li><li>所有产出必须以某种收入的形式分配到劳动或资本上—或者是工资、薪水、酬金、奖金等（作为对工人和在生产过程中贡献了劳动力的人的报酬），或者是其他如利润、红利、利息、租金、版税等（作为对生产过程中使用的资本的所有者的报酬）</li><li>资本指的是能够划分所有权、可在市场中交换的非人力资产的总和，不仅包括所有形式的不动产（含居民住宅），还包括公司和政府机构所使用的金融资本和专业资本（厂房、基础设施、机器、专利等）。</li><li>资本从来不是一成不变的，至少在初期总是伴随着风险与企业家精神，但也总是在积累到足够大的数额后向租金的形式转化，那是它的使命，也是它的逻辑终点</li><li>拥有财富的好处在于，人们即使不工作也能继续消费和积累，或者说能够以比自己从事生产更快的速度来继续消费和积累。同样的逻辑也适用于殖民主义时代的国际舞台</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;李嘉图：稀缺性原则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;马克思：无限积累原则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 私人资本的积累和分配过程本身就具有使财富集中且往往过度集中的强大推动力&lt;/li&gt;
&lt;li&gt;从长期来看，资本收益率（特别是顶</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何能很好地安排好自己的时间？</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/03/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/03/</id>
    <published>2021-04-17T09:29:37.000Z</published>
    <updated>2021-04-17T10:03:02.892Z</updated>
    
    <content type="html"><![CDATA[<p>人的一生两个最大的财富是：你的才华和你的时间。才华越来越多，但是时间越来越少，我们的一生可以说是用时间来换取才华。如果一天天过去了，我们的时间少了，而才华没有增加，那就是虚度了时光。所以，我们必须节省时间，有效率地使用时间。</p><p>如何有效率地利用时间呢？我有下面几个建议： </p><p><strong>1、做你真正感兴趣、与自己人生目标一致的事情。</strong>我发现我的“生产力”和我的“兴趣”有着直接的关系，而且这种关系还不是单纯的线性关系。如果面对我没有兴趣的事情，我可能会花掉40％的时间，但只能产生20％的效果；如果遇到我感兴趣的事情，我可能会花100％的时间而得到200％的效果。要在工作上奋发图强，身体健康固然重要，但是真正能改变你的状态的关键是心理而不是生理上的问题。真正地投入到你的工作中，你需要的是一种态度、一种渴望、一种意志。 </p><p><strong>2、****知道你的时间是如何花掉的。</strong>挑一个星期，每天记录下每30分钟做的事情，然后做一个分类（例如：读书、准备GRE、和朋友聊天、社团活动等）和统计，看看自己什么方面花了太多的时间。<strong>凡事想要进步，必须先理解现状。</strong>每天结束后，把一整天做的事记下来，每15分钟为一个单位（例如：1:00—1:15等车，1:15—1:45搭车，1:45—2:45与朋友喝茶……）。在一周结束后，分析一下，这周你的时间如何可以更有效率地安排？有没有活动占太大的比例？有没有方法可以增加效率？ </p><p>3、<strong>使用时间碎片和“死时间”。</strong>如果你做了上面的时间统计，你一定发现每天有很多时间流失掉了，例如等车、排队、走路、搭车等，可以用来背单字、打电话、温习功课等。现在随时随地都能上网，所以没有任何借口再发呆一次。重点是，无论自己忙还是不忙，你要把那些可以利用时间碎片做的事先准备好，到你有空闲的时候有计划地拿出来做。 </p><p><strong>3、要事为先</strong> - 每天一大早挑出最重要的三件事，当天一定要能够做完。在工作和生活中每天都有干不完的事，唯一能够做的就是分清轻<strong>重</strong>缓急。要理解急事不等于重要的事情。每天除了办又急又重要的事情外，一定要注意不要成为急事的奴隶。<strong>有些急但是不重要的事情，你要学会放掉，要能对人说 no!</strong> 而且每天这三件事里最好有一件重要但是不急的，这样才能确保你没有成为急事的奴隶。 </p><p><strong>4、要有纪律。</strong>有的年轻人会说自己“没有时间学习”，其实，换个说法就是“学习没有被排上优先级次序”。时间管理就是要找到自己的优先级，若颠倒顺序，一堆琐事占满了时间，重要的事情就没有空位了。”</p><p><strong>5、运用80％—20％原则。</strong>人如果利用最高效的时间，只要20％的投入就能产生80％的效率。相对来说，如果使用最低效的时间，80％的时间投入只能产生20%效率。一天头脑最清楚的时候，应该放在最需要专心的工作上。与朋友、家人在一起的时间，相对来说，不需要头脑那么清楚。所以，我们要把握一天中20％的最高效时间（有些人是早晨，也有些人是下午和晚上；除了时间之外，还要看你的心态，血糖的高低，休息是否足够等综合考量），专门用于最困难的科目和最需要思考的学习上。</p><p><strong>6、平衡工作和家庭。</strong>我对于家庭的时间分配是用下列的原则： </p><ul><li>划清界限、言出必行——对家人做出承诺后，而且一定要做到，但是希望其他时间得到谅解。制定较低的期望值以免造成失望。</li><li>忙中偷闲——不要一投入工作就忽视了家人，有时10分钟的体贴比10小时的陪伴还更受用。</li><li>闲中偷忙——学会怎么利用时间碎片。例如：家人没起床的时候，你就可以利用这段空闲时间去做你需要的工作。</li><li>注重有质量的时间（quality time）——时间不是每一分钟都是一样的，有时需要全神贯注，有时坐在旁边上网就可以了。要记得家人平时为你牺牲很多，度假、周末是你补偿的机会。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;人的一生两个最大的财富是：你的才华和你的时间。才华越来越多，但是时间越来越少，我们的一生可以说是用时间来换取才华。如果一天天过去了，我们的时间少了，而才华没有增加，那就是虚度了时光。所以，我们必须节省时间，有效率地使用时间。&lt;/p&gt;
&lt;p&gt;如何有效率地利用时间呢？我有下面几</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universeinheart.github.io/2021/04/17/Java/000/"/>
    <id>http://universeinheart.github.io/2021/04/17/Java/000/</id>
    <published>2021-04-17T09:28:39.826Z</published>
    <updated>2021-04-17T09:35:01.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是字节码增强技术"><a href="#什么是字节码增强技术" class="headerlink" title="什么是字节码增强技术"></a>什么是字节码增强技术</h3><p>java字节码生成之后，<strong>运行期</strong>对其进行修改，增强其功能</p><h3 id="运行期"><a href="#运行期" class="headerlink" title="运行期"></a>运行期</h3><h3 id="字节码相关技术"><a href="#字节码相关技术" class="headerlink" title="字节码相关技术"></a>字节码相关技术</h3><ul><li>动态代理</li><li>CGLIB</li><li>javassist</li><li>asm</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul><li>实质上动态生成字节码与反射机制结合</li><li>运行期根据不同的入参生成不同的字节码文件，继承于Proxy对象，实现传入对象的实现接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyObject</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        object=o;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),o.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before invoke ...&quot;</span>);</span><br><span class="line">        Object result= method.invoke(object,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;after invoke ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是字节码增强技术&quot;&gt;&lt;a href=&quot;#什么是字节码增强技术&quot; class=&quot;headerlink&quot; title=&quot;什么是字节码增强技术&quot;&gt;&lt;/a&gt;什么是字节码增强技术&lt;/h3&gt;&lt;p&gt;java字节码生成之后，&lt;strong&gt;运行期&lt;/strong&gt;对其进行修改</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>有效的读书笔记</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/00/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/00/</id>
    <published>2021-04-17T09:26:37.000Z</published>
    <updated>2021-04-17T10:00:40.106Z</updated>
    
    <content type="html"><![CDATA[<p>这种亲手写下摘要和读后感的过程也绝不是简单的“流水账式操作”,写完就可以扔掉了。这些宝贵的内容,正是将来总有一天你能用到的知识储备。</p><p>把灵感记录在纸上,让思考书面化，让灵感脱离之前的抽象状态，会更容易将其理解消化，也能促使你把灵感用作创意材料，想用的时候就能信手拈来。</p><img src="/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/00/6303b24fdf951a8758c49712e81033ad.jpg" class="" title="img"><p>读书笔记需要我们读书、画重点、写读书笔记三个步骤,每个步骤都需要阅读。这种多次阅读留下的印象肯定会比普通的阅读深刻好几倍。如果是亲手摘抄,效果会更好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这种亲手写下摘要和读后感的过程也绝不是简单的“流水账式操作”,写完就可以扔掉了。这些宝贵的内容,正是将来总有一天你能用到的知识储备。&lt;/p&gt;
&lt;p&gt;把灵感记录在纸上,让思考书面化，让灵感脱离之前的抽象状态，会更容易将其理解消化，也能促使你把灵感用作创意材料，想用的时候就能信</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>如果有时间看的东西</title>
    <link href="http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/05/"/>
    <id>http://universeinheart.github.io/2021/04/17/%E5%B0%8F%E5%86%8C%E5%AD%90/05/</id>
    <published>2021-04-17T09:12:37.000Z</published>
    <updated>2021-04-17T10:03:38.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="纪录片"><a href="#纪录片" class="headerlink" title="纪录片"></a>纪录片</h2><ol><li><p>无节制消费的元凶</p></li><li><ol><li>将产品制成易损品</li><li>制造焦虑，恐惧式营销</li><li>利用儿童影响大人的决策</li><li>信贷产品，宣扬超前消费</li><li>产品标签化（奢侈品）</li><li>激发非理性消费欲望</li></ol></li><li><p>但是还有书籍</p></li><li><p>万物与虚无</p></li><li><p>抽象：设计的艺术</p></li><li><p>积极心理学</p></li><li><p>粒子狂热</p></li><li><p>维度：数学漫步</p></li><li><p>公司的力量</p></li><li><p>神秘的混沌理论</p></li><li><p>人生果实</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;纪录片&quot;&gt;&lt;a href=&quot;#纪录片&quot; class=&quot;headerlink&quot; title=&quot;纪录片&quot;&gt;&lt;/a&gt;纪录片&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;无节制消费的元凶&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;将产品制成易损品&lt;/li&gt;
&lt;li&gt;制造焦虑，恐惧</summary>
      
    
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://universeinheart.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>00、Netty基础</title>
    <link href="http://universeinheart.github.io/2021/04/16/Netty/01/"/>
    <id>http://universeinheart.github.io/2021/04/16/Netty/01/</id>
    <published>2021-04-16T15:26:37.000Z</published>
    <updated>2021-04-17T09:18:32.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习本课程的目标</p><ol><li>掌握<code>Java</code>网络编程基础知识和原理</li><li>使用<code>Netty</code>构建一个<code>Java</code>网络服务器</li><li>熟悉<code>Netty</code>核心源码以及深层原理</li><li>熟练诊断、分析并排查<code>Netty</code>使用中的故障</li></ol></blockquote><ul><li>本质：网络应用程序框架</li><li>实现：异步，事件驱动</li><li>特性：高性能、可维护、快速开发</li><li>用途：开发服务器和客户端</li></ul><img src="/2021/04/16/Netty/01/image-20210416233502685.png" class="" title="image-20210416233502685"><p>第一章、<code>Netty</code> 背景，现状与趋势</p><p>第二章、<code>Netty</code> 源码，从领域知识的角度剖析</p><p>第三章、<code>Netty</code> 源码，从请求处理的角度剖析</p><p>第四章、<code>Netty</code> 实战入门，写一个玩具项目</p><p>第五章、<code>Netty</code> 实战进阶，把玩具变产品</p><p>第六章、成为<code>Netty</code> 贡献者</p><h2 id="经典的三种IO模型"><a href="#经典的三种IO模型" class="headerlink" title="经典的三种IO模型"></a>经典的三种IO模型</h2><blockquote><p>BIO 同步阻塞方式</p><p>NIO 同步非阻塞方式</p><p>AIO 异步非阻塞方式</p></blockquote><img src="/2021/04/16/Netty/01/image-20210417142957552.png" class="" title="image-20210417142957552"><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><ul><li>菜没好，要不要死等 -&gt; 数据就绪前要不要等待？</li><li>没有数据传过来时，读会阻塞直到有数据；缓冲区满时，写操作也会阻塞。</li><li>非阻塞遇到这些情况，都是直接返回。</li></ul><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><ul><li>菜好了，谁端 -&gt; 数据就绪后，数据操作谁完成？</li><li>数据就绪后需要自己去读是同步</li><li>数据就绪直接读好再回调给程序是异步</li></ul><h3 id="为什么Netty目前只支持NIO"><a href="#为什么Netty目前只支持NIO" class="headerlink" title="为什么Netty目前只支持NIO"></a>为什么Netty目前只支持NIO</h3><p>为什么不建议使用BIO？</p><ul><li>连接数高的情况下：阻塞-&gt; 耗资源、效率低</li></ul><p>为什么删掉已经做好的AIO？</p><ul><li>Windows实现成熟，但是很少用来做服务器。</li><li>Linux常用来做服务器，但是AIO实现不够成熟。</li><li>Linux下AIO相比较NIO的性能提升不明显</li></ul><h2 id="Reactor的三种版本"><a href="#Reactor的三种版本" class="headerlink" title="Reactor的三种版本"></a>Reactor的三种版本</h2><p>Reactor是一种开发模式， 模式的核心流程：</p><ol><li>注册感兴趣的事件</li><li>扫描是否有感兴趣的事件发生</li><li>事件发生后作出相应的处理</li></ol><img src="/2021/04/16/Netty/01/image-20210417145140095.png" class="" title="image-20210417145140095"><h4 id="Reactor模式V1：单线程"><a href="#Reactor模式V1：单线程" class="headerlink" title="Reactor模式V1：单线程"></a>Reactor模式V1：单线程</h4><img src="/2021/04/16/Netty/01/image-20210417150923036.png" class="" title="image-20210417150923036"><h4 id="Reactor模式V2：多线程"><a href="#Reactor模式V2：多线程" class="headerlink" title="Reactor模式V2：多线程"></a>Reactor模式V2：多线程</h4><img src="/2021/04/16/Netty/01/image-20210417150944752.png" class="" title="image-20210417150944752"><h4 id="Reactor模式V3：主从多线程"><a href="#Reactor模式V3：主从多线程" class="headerlink" title="Reactor模式V3：主从多线程"></a>Reactor模式V3：主从多线程</h4><img src="/2021/04/16/Netty/01/image-20210417151004621.png" class="" title="image-20210417151004621"><h4 id="如何在Netty中使用Reactor模式"><a href="#如何在Netty中使用Reactor模式" class="headerlink" title="如何在Netty中使用Reactor模式"></a>如何在Netty中使用Reactor模式</h4><img src="/2021/04/16/Netty/01/image-20210417151230262.png" class="" title="image-20210417151230262"><h2 id="解析Netty对Reactor模式支持的常见疑问"><a href="#解析Netty对Reactor模式支持的常见疑问" class="headerlink" title="解析Netty对Reactor模式支持的常见疑问"></a>解析Netty对Reactor模式支持的常见疑问</h2><h4 id="Netty如何支持主从Reactor模式的？"><a href="#Netty如何支持主从Reactor模式的？" class="headerlink" title="Netty如何支持主从Reactor模式的？"></a>Netty如何支持主从Reactor模式的？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup, io.netty.channel.EventLoopGroup)</span></span><br><span class="line">    <span class="keyword">volatile</span> EventLoopGroup group;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerBootstrap <span class="title">group</span><span class="params">(EventLoopGroup parentGroup, EventLoopGroup childGroup)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对group进行赋值</span></span><br><span class="line">        <span class="keyword">super</span>.group(parentGroup);</span><br><span class="line">        ObjectUtil.checkNotNull(childGroup, <span class="string">&quot;childGroup&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.childGroup != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;childGroup set already&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.childGroup = childGroup;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//io.netty.bootstrap.AbstractBootstrap#initAndRegister</span></span><br><span class="line">    <span class="comment">//开始register</span></span><br><span class="line">   <span class="comment">// parentGroup 绑定 channel  -&gt;  NioServerSocketChannel</span></span><br><span class="line">        ChannelFuture regFuture = config().group().register(channel);</span><br><span class="line">        <span class="keyword">if</span> (regFuture.cause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel.isRegistered()) &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channel.unsafe().closeForcibly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</span></span><br><span class="line"><span class="comment">// msg -&gt; NioSocketChannel</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Channel child = (Channel) msg;</span><br><span class="line"></span><br><span class="line">            child.pipeline().addLast(childHandler);</span><br><span class="line"></span><br><span class="line">            setChannelOptions(child, childOptions, logger);</span><br><span class="line">            setAttributes(child, childAttrs);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// childGroup 绑定 channel  -&gt;  NioSocketChannel</span></span><br><span class="line">                childGroup.register(child).addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">                            forceClose(child, future.cause());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                forceClose(child, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="为什么说Netty的main-reactor-大多并不能用到一个线程组，只能线程组里面的一个？"><a href="#为什么说Netty的main-reactor-大多并不能用到一个线程组，只能线程组里面的一个？" class="headerlink" title="为什么说Netty的main reactor 大多并不能用到一个线程组，只能线程组里面的一个？"></a>为什么说Netty的main reactor 大多并不能用到一个线程组，只能线程组里面的一个？</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定地址和端口</span></span><br><span class="line">io.netty.bootstrap.AbstractBootstrap#doBind </span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line"><span class="comment">// parentGroup 绑定 channel  -&gt;  NioServerSocketChannel</span></span><br><span class="line">io.netty.bootstrap.AbstractBootstrap#initAndRegister</span><br></pre></td></tr></table></figure><p>因为服务一般只绑定一个端口，<code>doBind</code>只会调用一次，所以<code>initAndRegister</code>只调用一次</p><h4 id="Netty给Channel-分配NIO-event-loop-的规则是什么？"><a href="#Netty给Channel-分配NIO-event-loop-的规则是什么？" class="headerlink" title="Netty给Channel 分配NIO event loop 的规则是什么？"></a>Netty给Channel 分配NIO event loop 的规则是什么？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NioEventLoopGroup 继承 MultithreadEventLoopGroup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//io.netty.channel.MultithreadEventLoopGroup#register(io.netty.channel.Channel)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">register</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// next()方法根据下面的选择器中next方法选择一个NioEventLoop，将channel绑定到上面</span></span><br><span class="line">    <span class="keyword">return</span> next().register(channel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// executors -&gt; NioEventLoop[]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EventExecutorChooser <span class="title">newChooser</span><span class="params">(EventExecutor[] executors)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据待绑定的executor是否是2的幂次方，做出不同的选择</span></span><br><span class="line">    <span class="keyword">if</span> (isPowerOfTwo(executors.length)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PowerOfTwoEventExecutorChooser(executors);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GenericEventExecutorChooser(executors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用模式的NIO-实现多路复用器是怎么跨平台的？"><a href="#通用模式的NIO-实现多路复用器是怎么跨平台的？" class="headerlink" title="通用模式的NIO 实现多路复用器是怎么跨平台的？"></a>通用模式的NIO 实现多路复用器是怎么跨平台的？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SelectorProvider.provider 不同的JDK有不同的实现 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioEventLoopGroup</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(nThreads, threadFactory, SelectorProvider.provider());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Netty基础</summary>
    
    
    
    <category term="Netty" scheme="http://universeinheart.github.io/categories/Netty/"/>
    
    
    <category term="网络" scheme="http://universeinheart.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="Netty" scheme="http://universeinheart.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>09、Redis 切片集群</title>
    <link href="http://universeinheart.github.io/2021/04/16/Redis/09/"/>
    <id>http://universeinheart.github.io/2021/04/16/Redis/09/</id>
    <published>2021-04-16T14:00:00.000Z</published>
    <updated>2021-04-16T14:49:06.307Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 <code>RDB</code> 进行持久化时，Redis 会  <code>fork</code> 子进程来完成，<code>fork</code> 操作的用时和 Redis 的数据量是 <strong>正相关</strong> 的，而 fork 在执行时会阻塞主线程。数据量越大，<code>fork</code>  操作造成的主线程阻塞的时间越长。所以，在使用 RDB 对 25GB 的数据进行持久化时，数据量较大，后台运行的子进程在 fork  创建时阻塞了主线程，于是就导致 Redis 响应变慢了。</p><p>切片集群，也叫分片集群，就是指启动多个  Redis 实例组成一个集群，然后按照一定的规则，把收到的数据划分成多份，每一份用一个实例来保存。 在切片集群中，实例在为 5GB 数据生成 RDB 时，数据量就小了很多，fork 子进程一般不会给主线程带来较长时间的阻塞。采用多个实例保存数据切片后，我们既能保存 25GB 数据，又避免了 fork 子进程阻塞主线程而导致的响应突然变慢。</p><h2 id="数据切片和实例的对应分布关系"><a href="#数据切片和实例的对应分布关系" class="headerlink" title="数据切片和实例的对应分布关系"></a>数据切片和实例的对应分布关系</h2><p><code>Redis Cluster</code> 方案中就规定了数据和实例的对应规则。</p><p><code>Redis Cluster</code>  方案采用哈希槽（<code>Hash Slot</code>，接下来我会直接称之为 <code>Slot</code>），来处理数据和实例之间的映射关系。在 <code>Redis Cluster</code>  方案中，一个切片集群共有 <code>16384</code> 个哈希槽，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中。</p><p>首先根据键值对的 key，按照 <code>CRC16</code> 算法计算一个 16 bit 的值；然后，再用这个 16bit 值对 <code>16384</code> 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽</p><p>在部署 <code>Redis Cluster</code> 方案时，可以使用 <code>cluster create</code> 命令创建集群，此时，Redis 会自动把这些槽平均分布在集群实例上。例如，如果集群中有 N 个实例，那么，每个实例上的槽个数为 16384/N 个。我们也可以使用 <code>cluster meet</code> 命令手动建立实例间的连接，形成集群，再使用 <code>cluster addslots</code> 命令，指定每个实例上的哈希槽个数。<strong>在手动分配哈希槽时，需要把 16384 个槽都分配完，否则 Redis 集群无法正常工作。</strong></p><h2 id="客户端如何定位数据？"><a href="#客户端如何定位数据？" class="headerlink" title="客户端如何定位数据？"></a>客户端如何定位数据？</h2><blockquote><p>客户端为什么可以在访问任何一个实例时，都能获得所有的哈希槽信息呢？</p><p>这是因为，Redis 实例会把自己的哈希槽信息发给和它相连接的其它实例，来完成哈希槽分配信息的扩散。当实例之间相互连接后，每个实例就有所有哈希槽的映射关系了。</p><p>客户端收到哈希槽信息后，会把哈希槽信息缓存在本地。当客户端请求键值对时，会先计算键所对应的哈希槽，然后就可以给相应的实例发送请求了。</p></blockquote><p>实例和哈希槽的对应关系变更：</p><p>1、在集群中，实例有新增或删除，Redis 需要重新分配哈希槽。</p><p>2、为了负载均衡，Redis 需要把哈希槽在所有实例上重新分布一遍。</p><blockquote><p>客户端是无法主动感知最新的哈希槽分配信息，怎么办？</p><p>答：Redis Cluster 方案提供了一种重定向机制，当客户端把一个键值对的操作请求发给一个实例时，如果这个实例上并没有这个键值对映射的哈希槽，那么，这个实例就会给客户端返回下面的 <code>MOVED</code> 命令响应结果，这个结果中就包含了新实例的访问地址。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; MOVED 命令表示，客户端请求的键值对所在的哈希槽 13320，实际是在 172.16.19.5 这个实例上</span><br><span class="line">GET hello:key</span><br><span class="line">(error) MOVED 13320 172.16.19.5:6379</span><br></pre></td></tr></table></figure><img src="/2021/04/16/Redis/09/image-20210119151846324.png" class="" title="image-20210119151846324">]]></content>
    
    
    <summary type="html">数据增多了，是该加内存还是加实例？</summary>
    
    
    
    <category term="极客时间Redis实战" scheme="http://universeinheart.github.io/categories/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4Redis%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="Redis" scheme="http://universeinheart.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>11、Redis String 为什么不好用了？</title>
    <link href="http://universeinheart.github.io/2021/04/16/Redis/10/"/>
    <id>http://universeinheart.github.io/2021/04/16/Redis/10/</id>
    <published>2021-04-16T14:00:00.000Z</published>
    <updated>2021-04-16T14:53:52.340Z</updated>
    
    <content type="html"><![CDATA[<p>String 类型并不是适用于所有场合的，它有一个明显的短板，就是它 <strong>保存数据时所消耗的内存空间较多</strong></p><p>使用 <strong>二级编码</strong>，实现 <strong>用集合类型保存单键值对</strong>，可以明显降低Redis实例的内存空间消耗</p><h3 id="String-类型的内存空间消耗在哪儿了"><a href="#String-类型的内存空间消耗在哪儿了" class="headerlink" title="String 类型的内存空间消耗在哪儿了?"></a>String 类型的内存空间消耗在哪儿了?</h3><p>除了记录实际数据，String 类型还需要额外的内存空间记录数据长度、空间使用等元数据信息</p><blockquote><p>String 类型具体是怎么保存数据的呢？</p><p>保存 64 位有符号整数时，String 类型会把它保存为一个 8 字节的 Long 类型整数，这种保存方式通常也叫作 int 编码方式。</p><p>保存的数据中包含字符时，String 类型就会用简单动态字符串（Simple Dynamic String，SDS）结构体来保存,在 <code>SDS</code> 中，<code>buf</code> 保存实际数据，而 <code>len</code> 和 <code>alloc</code> 本身其实是 <code>SDS</code> 结构体的额外开销。</p><ul><li><code>buf</code>：字节数组，保存实际数据。为了表示字节数组的结束，Redis 会自动在数组最后加一个“\0”，这就会额外占用 1 个字节的开销。</li><li><code>len</code>：占 4 个字节，表示 buf 的已用长度。</li><li><code>alloc</code>：也占个 4  字节，表示 buf 的实际分配长度，一般大于 len。</li></ul></blockquote><p>RedisObject </p><p>全局哈希表</p><p>jemalloc </p><h3 id="用什么数据结构可以节省内存"><a href="#用什么数据结构可以节省内存" class="headerlink" title="用什么数据结构可以节省内存?"></a>用什么数据结构可以节省内存?</h3><p><strong>压缩列表（ziplist）</strong>，这是一种非常节省内存的结构，压缩列表表头有三个字段 <code>zlbytes</code>、<code>zltail</code> 和 <code>zllen</code>，分别表示 <strong>列表长度</strong>、<strong>列表尾的偏移量</strong>，以及 <strong>列表中的 entry 个数</strong>。压缩列表尾还有一个 <code>zlend</code>，表示列表结束。</p><p>压缩列表之所以能节省内存，就在于它是用一系列 <strong>连续的 entry 保存数据</strong>。</p><p>每个 entry 的元数据包括下面几部分。</p><ul><li><code>prev_len</code>，表示前一个 entry  的长度。prev_len 有两种取值情况：1 字节或 5 字节。取值 1 字节时，表示上一个 entry 的长度小于 254 字节。虽然 1  字节的值能表示的数值范围是 0 到 255，但是压缩列表中 zlend 的取值默认是 255，因此，就默认用 255  表示整个压缩列表的结束，其他表示长度的地方就不能再用 255 这个值了。所以，当上一个 entry 长度小于 254 字节时，prev_len  取值为 1 字节，否则，就取值为 5 字节。</li><li><code>len</code>：表示自身长度，4 字节；</li><li><code>encoding</code>：表示编码方式，1  字节；</li><li><code>content</code>：保存实际数据。</li></ul><h3 id="如何用集合类型保存单值键值对"><a href="#如何用集合类型保存单值键值对" class="headerlink" title="如何用集合类型保存单值键值对?"></a>如何用集合类型保存单值键值对?</h3><p>采用基于 Hash 类型的二级编码方法。就是把一个单值的数据拆分成两部分，前一部分作为 Hash 集合的 key，后一部分作为 Hash 集合的 value，这样一来，我们就可以把单值数据保存到 Hash 集合中了。</p><p>以图片 ID 1101000060  和图片存储对象 ID 3302000080 为例，我们可以把图片 ID 的前 7 位（1101000）作为 <strong>Hash 类型的键</strong>，把图片 ID  的最后 3 位（060）和图片存储对象 ID 分别作为 <strong>Hash 类型值中的 key 和 value</strong>。按照这种设计方法，我在 Redis  中插入了一组图片 ID 及其存储对象 ID 的记录，并且用 info 命令查看了内存开销，我发现，增加一条记录后，内存占用只增加了 16  字节，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; info memory</span><br><span class="line"><span class="comment"># Memory</span></span><br><span class="line">used_memory:1039120</span><br><span class="line">127.0.0.1:6379&gt; hset 1101000 060 3302000080</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; info memory</span><br><span class="line"><span class="comment"># Memory</span></span><br><span class="line">used_memory:1039136</span><br></pre></td></tr></table></figure><h3 id="Hash-类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？"><a href="#Hash-类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？" class="headerlink" title="Hash 类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？"></a>Hash 类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？</h3><p>Hash  类型设置了用压缩列表保存数据时的两个阈值，一旦超过了阈值，Hash  类型就会用哈希表来保存数据了。</p><p>这两个阈值分别对应以下两个配置项：</p><p><code>hash-max-ziplist-entries</code>：表示用压缩列表保存时哈希集合中的 <strong>最大元素个数</strong>。</p><p><code>hash-max-ziplist-value</code>：表示用压缩列表保存时哈希集合中 <strong>单个元素的最大长度</strong>。</p><p>如果我们往 Hash 集合中写入的元素个数超过了 <code>hash-max-ziplist-entries</code>，或者写入的单个元素大小超过了 <code>hash-max-ziplist-value</code>，Redis  就会自动把 Hash 类型的实现结构由 <strong>压缩列表转为哈希表</strong>。一旦从压缩列表转为了哈希表，Hash  类型就会一直用哈希表进行保存，而不会再转回压缩列表了。在节省内存空间方面，哈希表就没有压缩列表那么高效了。</p><p>为了能充分使用压缩列表的精简内存布局，我们一般要 <strong>控制保存在 Hash 集合中的元素个数</strong>。所以，在刚才的二级编码中，我们只用图片 ID 最后 3 位作为 Hash 集合的 key，也就保证了 Hash  集合的元素个数不超过 1000，同时，我们把 hash-max-ziplist-entries 设置为 1000，这样一来，Hash  集合就可以一直使用压缩列表来节省内存空间了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;String 类型并不是适用于所有场合的，它有一个明显的短板，就是它 &lt;strong&gt;保存数据时所消耗的内存空间较多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;strong&gt;二级编码&lt;/strong&gt;，实现 &lt;strong&gt;用集合类型保存单键值对&lt;/strong&gt;，可以明显降</summary>
      
    
    
    
    <category term="极客时间Redis实战" scheme="http://universeinheart.github.io/categories/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4Redis%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="Redis" scheme="http://universeinheart.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>11、Redis String 为什么不好用了？</title>
    <link href="http://universeinheart.github.io/2021/04/16/Redis/11/"/>
    <id>http://universeinheart.github.io/2021/04/16/Redis/11/</id>
    <published>2021-04-16T14:00:00.000Z</published>
    <updated>2021-04-16T15:16:33.554Z</updated>
    
    <content type="html"><![CDATA[<p>String 类型并不是适用于所有场合的，它有一个明显的短板，就是它 <strong>保存数据时所消耗的内存空间较多</strong></p><p>使用 <strong>二级编码</strong>，实现 <strong>用集合类型保存单键值对</strong>，可以明显降低Redis实例的内存空间消耗</p><h3 id="String-类型的内存空间消耗在哪儿了"><a href="#String-类型的内存空间消耗在哪儿了" class="headerlink" title="String 类型的内存空间消耗在哪儿了?"></a>String 类型的内存空间消耗在哪儿了?</h3><p>除了记录实际数据，String 类型还需要额外的内存空间记录数据长度、空间使用等元数据信息</p><blockquote><p>String 类型具体是怎么保存数据的呢？</p><p>保存 64 位有符号整数时，String 类型会把它保存为一个 8 字节的 Long 类型整数，这种保存方式通常也叫作 int 编码方式。</p><p>保存的数据中包含字符时，String 类型就会用简单动态字符串（Simple Dynamic String，SDS）结构体来保存,在 <code>SDS</code> 中，<code>buf</code> 保存实际数据，而 <code>len</code> 和 <code>alloc</code> 本身其实是 <code>SDS</code> 结构体的额外开销。</p><ul><li><code>buf</code>：字节数组，保存实际数据。为了表示字节数组的结束，Redis 会自动在数组最后加一个“\0”，这就会额外占用 1 个字节的开销。</li><li><code>len</code>：占 4 个字节，表示 buf 的已用长度。</li><li><code>alloc</code>：也占个 4  字节，表示 buf 的实际分配长度，一般大于 len。</li></ul></blockquote><p>RedisObject </p><p>全局哈希表</p><p>jemalloc </p><h3 id="用什么数据结构可以节省内存"><a href="#用什么数据结构可以节省内存" class="headerlink" title="用什么数据结构可以节省内存?"></a>用什么数据结构可以节省内存?</h3><p><strong>压缩列表（ziplist）</strong>，这是一种非常节省内存的结构，压缩列表表头有三个字段 <code>zlbytes</code>、<code>zltail</code> 和 <code>zllen</code>，分别表示 <strong>列表长度</strong>、<strong>列表尾的偏移量</strong>，以及 <strong>列表中的 entry 个数</strong>。压缩列表尾还有一个 <code>zlend</code>，表示列表结束。</p><img src="/2021/04/16/Redis/11/image-20210119201052779.png" class="" title="image-20210119201052779"><p>压缩列表之所以能节省内存，就在于它是用一系列 <strong>连续的 entry 保存数据</strong>。</p><p>每个 entry 的元数据包括下面几部分。</p><ul><li><code>prev_len</code>，表示前一个 entry  的长度。prev_len 有两种取值情况：1 字节或 5 字节。取值 1 字节时，表示上一个 entry 的长度小于 254 字节。虽然 1  字节的值能表示的数值范围是 0 到 255，但是压缩列表中 zlend 的取值默认是 255，因此，就默认用 255  表示整个压缩列表的结束，其他表示长度的地方就不能再用 255 这个值了。所以，当上一个 entry 长度小于 254 字节时，prev_len  取值为 1 字节，否则，就取值为 5 字节。</li><li><code>len</code>：表示自身长度，4 字节；</li><li><code>encoding</code>：表示编码方式，1  字节；</li><li><code>content</code>：保存实际数据。</li></ul><h3 id="如何用集合类型保存单值键值对"><a href="#如何用集合类型保存单值键值对" class="headerlink" title="如何用集合类型保存单值键值对?"></a>如何用集合类型保存单值键值对?</h3><p>采用基于 Hash 类型的二级编码方法。就是把一个单值的数据拆分成两部分，前一部分作为 Hash 集合的 key，后一部分作为 Hash 集合的 value，这样一来，我们就可以把单值数据保存到 Hash 集合中了。</p><p>以图片 ID 1101000060  和图片存储对象 ID 3302000080 为例，我们可以把图片 ID 的前 7 位（1101000）作为 <strong>Hash 类型的键</strong>，把图片 ID  的最后 3 位（060）和图片存储对象 ID 分别作为 <strong>Hash 类型值中的 key 和 value</strong>。按照这种设计方法，我在 Redis  中插入了一组图片 ID 及其存储对象 ID 的记录，并且用 info 命令查看了内存开销，我发现，增加一条记录后，内存占用只增加了 16  字节，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; info memory</span><br><span class="line"><span class="comment"># Memory</span></span><br><span class="line">used_memory:1039120</span><br><span class="line">127.0.0.1:6379&gt; hset 1101000 060 3302000080</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; info memory</span><br><span class="line"><span class="comment"># Memory</span></span><br><span class="line">used_memory:1039136</span><br></pre></td></tr></table></figure><h3 id="Hash-类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？"><a href="#Hash-类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？" class="headerlink" title="Hash 类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？"></a>Hash 类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？</h3><p>Hash  类型设置了用压缩列表保存数据时的两个阈值，一旦超过了阈值，Hash  类型就会用哈希表来保存数据了。</p><p>这两个阈值分别对应以下两个配置项：</p><p><code>hash-max-ziplist-entries</code>：表示用压缩列表保存时哈希集合中的 <strong>最大元素个数</strong>。</p><p><code>hash-max-ziplist-value</code>：表示用压缩列表保存时哈希集合中 <strong>单个元素的最大长度</strong>。</p><p>如果我们往 Hash 集合中写入的元素个数超过了 <code>hash-max-ziplist-entries</code>，或者写入的单个元素大小超过了 <code>hash-max-ziplist-value</code>，Redis  就会自动把 Hash 类型的实现结构由 <strong>压缩列表转为哈希表</strong>。一旦从压缩列表转为了哈希表，Hash  类型就会一直用哈希表进行保存，而不会再转回压缩列表了。在节省内存空间方面，哈希表就没有压缩列表那么高效了。</p><p>为了能充分使用压缩列表的精简内存布局，我们一般要 <strong>控制保存在 Hash 集合中的元素个数</strong>。所以，在刚才的二级编码中，我们只用图片 ID 最后 3 位作为 Hash 集合的 key，也就保证了 Hash  集合的元素个数不超过 1000，同时，我们把 hash-max-ziplist-entries 设置为 1000，这样一来，Hash  集合就可以一直使用压缩列表来节省内存空间了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;String 类型并不是适用于所有场合的，它有一个明显的短板，就是它 &lt;strong&gt;保存数据时所消耗的内存空间较多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;strong&gt;二级编码&lt;/strong&gt;，实现 &lt;strong&gt;用集合类型保存单键值对&lt;/strong&gt;，可以明显降</summary>
      
    
    
    
    <category term="极客时间Redis实战" scheme="http://universeinheart.github.io/categories/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4Redis%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="Redis" scheme="http://universeinheart.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
